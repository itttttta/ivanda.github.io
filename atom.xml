<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ivanda的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-28T03:22:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wangda]]></name>
    <email><![CDATA[11951691@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IOS开发中的消息传递delegate和block]]></title>
    <link href="http://yoursite.com/2015/09/28/IOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92delegate%E5%92%8Cblock/"/>
    <id>http://yoursite.com/2015/09/28/IOS开发中的消息传递delegate和block/</id>
    <published>2015-09-28T03:12:33.000Z</published>
    <updated>2015-09-28T03:22:30.000Z</updated>
    <content type="html"><![CDATA[<p>最近自己主导的项目已经趋于收尾阶段,自己也在不断的总结这半年来的痛苦与收获。这两天思考了一个问题就是delegate与block。我曾经有一段时间很少使用delegate 几乎都是blocks或者通知,因为afn中就很少出现delegate 所以 我就想 现在既然不怎么理解 那就模仿大神的写法去写呗。今天在cocoachina上读到一篇很不错的文章现在转载出来 可以参考一下。还有我经常在项目中使用block是因为 delegate会使得代码看起来很乱，而blocks会显得简洁一点 我曾经也看过一个比较牛逼的开源客户端 都是block为主 这样确实增强了程序的可读性。 </p>
<hr>
<p>原文连接：<a href="http://www.cocoachina.com/ios/20150927/13525.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20150927/13525.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近自己主导的项目已经趋于收尾阶段,自己也在不断的总结这半年来的痛苦与收获。这两天思考了一个问题就是delegate与block。我曾经有一段时间很少使用delegate 几乎都是blocks或者通知,因为afn中就很少出现delegate 所以 我就想 现在既然不怎么理解]]>
    </summary>
    
      <category term="block" scheme="http://yoursite.com/tags/block/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iphone设备照片拍摄横转]]></title>
    <link href="http://yoursite.com/2015/09/28/iphone%E8%AE%BE%E5%A4%87%E7%85%A7%E7%89%87%E6%8B%8D%E6%91%84%E6%A8%AA%E8%BD%AC/"/>
    <id>http://yoursite.com/2015/09/28/iphone设备照片拍摄横转/</id>
    <published>2015-09-28T02:55:44.000Z</published>
    <updated>2015-09-28T03:02:14.000Z</updated>
    <content type="html"><![CDATA[<p>参考连接:<a href="http://stackoverflow.com/questions/5427656/ios-uiimagepickercontroller-result-image-orientation-after-upload" target="_blank" rel="external">http://stackoverflow.com/questions/5427656/ios-uiimagepickercontroller-result-image-orientation-after-upload</a></p>
<font color="green">ios 照片横转一般存在与拍摄中,相册中的照片应该经过了特殊处理而很少出现这样的情况。我出现的现象就是 直接拍摄的照片传给后台就会出现，如果照片先保存到相册，再传给后台就不会出现(ps:后台是php做的);</font>

<p><strong>处理方法
</strong></p>
<p><strong>UIImage+fixOrientation.h
</strong><br>    @interface UIImage (fixOrientation)</p>
<pre><code><span class="bullet">- </span>(UIImage <span class="strong">*)fixOrientation;

</span>@end
</code></pre><p><strong>UIImage+fixOrientation.m
</strong></p>
<pre><code><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">fixOrientation</span>)</span>

- (<span class="built_in">UIImage</span> *)fixOrientation {

    <span class="comment">// No-op if the orientation is already correct</span>
    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.imageOrientation</span> == <span class="built_in">UIImageOrientationUp</span>) <span class="keyword">return</span> <span class="keyword">self</span>;

    <span class="comment">// We need to calculate the proper transformation to make the image upright.</span>
    <span class="comment">// We do it in 2 steps: Rotate if Left/Right/Down, and then flip if Mirrored.</span>
    <span class="built_in">CGAffineTransform</span> transform = <span class="built_in">CGAffineTransformIdentity</span>;

    <span class="keyword">switch</span> (<span class="keyword">self</span><span class="variable">.imageOrientation</span>) {
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDown</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDownMirrored</span>:
            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>);
            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, M_PI);
            <span class="keyword">break</span>;

        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeft</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:
            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="number">0</span>);
            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, M_PI_2);
            <span class="keyword">break</span>;

        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRight</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:
            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="number">0</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>);
            transform = <span class="built_in">CGAffineTransformRotate</span>(transform, -M_PI_2);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationUp</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationUpMirrored</span>:
            <span class="keyword">break</span>;
    }

    <span class="keyword">switch</span> (<span class="keyword">self</span><span class="variable">.imageOrientation</span>) {
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationUpMirrored</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDownMirrored</span>:
            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="number">0</span>);
            transform = <span class="built_in">CGAffineTransformScale</span>(transform, -<span class="number">1</span>, <span class="number">1</span>);
            <span class="keyword">break</span>;

        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:
            transform = <span class="built_in">CGAffineTransformTranslate</span>(transform, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>, <span class="number">0</span>);
            transform = <span class="built_in">CGAffineTransformScale</span>(transform, -<span class="number">1</span>, <span class="number">1</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationUp</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationDown</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeft</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRight</span>:
            <span class="keyword">break</span>;
    }

    <span class="comment">// Now we draw the underlying CGImage into a new context, applying the transform</span>
    <span class="comment">// calculated above.</span>
    <span class="built_in">CGContextRef</span> ctx = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">NULL</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>,
                                             <span class="built_in">CGImageGetBitsPerComponent</span>(<span class="keyword">self</span><span class="variable">.CGImage</span>), <span class="number">0</span>,
                                             <span class="built_in">CGImageGetColorSpace</span>(<span class="keyword">self</span><span class="variable">.CGImage</span>),
                                             <span class="built_in">CGImageGetBitmapInfo</span>(<span class="keyword">self</span><span class="variable">.CGImage</span>));
    <span class="built_in">CGContextConcatCTM</span>(ctx, transform);
    <span class="keyword">switch</span> (<span class="keyword">self</span><span class="variable">.imageOrientation</span>) {
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeft</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationLeftMirrored</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRight</span>:
        <span class="keyword">case</span> <span class="built_in">UIImageOrientationRightMirrored</span>:
            <span class="comment">// Grr...</span>
            <span class="built_in">CGContextDrawImage</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>,<span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>), <span class="keyword">self</span><span class="variable">.CGImage</span>);
            <span class="keyword">break</span>;

        <span class="keyword">default</span>:
            <span class="built_in">CGContextDrawImage</span>(ctx, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">self</span><span class="variable">.size</span><span class="variable">.width</span>,<span class="keyword">self</span><span class="variable">.size</span><span class="variable">.height</span>), <span class="keyword">self</span><span class="variable">.CGImage</span>);
            <span class="keyword">break</span>;
    }

    <span class="comment">// And now we just create a new UIImage from the drawing context</span>
    <span class="built_in">CGImageRef</span> cgimg = <span class="built_in">CGBitmapContextCreateImage</span>(ctx);
    <span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageWith<span class="built_in">CGImage</span>:cgimg];
    <span class="built_in">CGContextRelease</span>(ctx);
    <span class="built_in">CGImageRelease</span>(cgimg);
    <span class="keyword">return</span> img;
}

<span class="keyword">@end</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>参考连接:<a href="http://stackoverflow.com/questions/5427656/ios-uiimagepickercontroller-result-image-orientation-after-upload" target="_blan]]>
    </summary>
    
      <category term="拍照照片横转" scheme="http://yoursite.com/tags/%E6%8B%8D%E7%85%A7%E7%85%A7%E7%89%87%E6%A8%AA%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS二维码扫描]]></title>
    <link href="http://yoursite.com/2015/09/28/IOS%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2015/09/28/IOS二维码扫描/</id>
    <published>2015-09-28T02:39:19.000Z</published>
    <updated>2015-09-28T02:52:09.000Z</updated>
    <content type="html"><![CDATA[<p>二维码扫描 本人用的是zxing第三方库 关于zxing 请自行百度</p>
<p>使用教程 通过cocoapod 加入zixng</p>
<pre><code><span class="rule"><span class="attribute">platform </span>:<span class="value">ios, <span class="string">'7.0'</span>
pod <span class="string">'ZXingObjC'</span>, <span class="string">'~&gt; 3.0'</span></span></span>
</code></pre><p><strong>相机拍摄关键代码</strong></p>
<pre><code><span class="preprocessor">#pragma mark</span>
<span class="preprocessor">#pragma mark ViewInit</span>
- (ZXCapture *)capture
{
    <span class="keyword">if</span>(!_capture)
    {
        <span class="keyword">self</span><span class="variable">.capture</span> = [[ZXCapture alloc] init];
        <span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.camera</span> = <span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.back</span>;
        <span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.focusMode</span> = <span class="built_in">AVCaptureFocusModeContinuousAutoFocus</span>;
        <span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.rotation</span> = <span class="number">90.0</span>f;
        <span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.layer</span><span class="variable">.frame</span> = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.bounds</span>;
        [<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.layer</span> addSublayer:<span class="keyword">self</span><span class="variable">.capture</span><span class="variable">.layer</span>];
    }
    <span class="keyword">return</span> _capture;
}
</code></pre><p>pragma mark - Private Methods</p>
<pre><code>- (NSString *)<span class="string">barcodeFormatToString:</span>(ZXBarcodeFormat)format {
    <span class="keyword">switch</span> (format) {
        <span class="keyword">case</span> <span class="string">kBarcodeFormatAztec:</span>
            <span class="keyword">return</span> @<span class="string">"Aztec"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatCodabar:</span>
            <span class="keyword">return</span> @<span class="string">"CODABAR"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatCode39:</span>
            <span class="keyword">return</span> @<span class="string">"Code 39"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatCode93:</span>
            <span class="keyword">return</span> @<span class="string">"Code 93"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatCode128:</span>
            <span class="keyword">return</span> @<span class="string">"Code 128"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatDataMatrix:</span>
            <span class="keyword">return</span> @<span class="string">"Data Matrix"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatEan8:</span>
            <span class="keyword">return</span> @<span class="string">"EAN-8"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatEan13:</span>
            <span class="keyword">return</span> @<span class="string">"EAN-13"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatITF:</span>
            <span class="keyword">return</span> @<span class="string">"ITF"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatPDF417:</span>
            <span class="keyword">return</span> @<span class="string">"PDF417"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatQRCode:</span>
            <span class="keyword">return</span> @<span class="string">"QR Code"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatRSS14:</span>
            <span class="keyword">return</span> @<span class="string">"RSS 14"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatRSSExpanded:</span>
            <span class="keyword">return</span> @<span class="string">"RSS Expanded"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatUPCA:</span>
            <span class="keyword">return</span> @<span class="string">"UPCA"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatUPCE:</span>
            <span class="keyword">return</span> @<span class="string">"UPCE"</span>;

        <span class="keyword">case</span> <span class="string">kBarcodeFormatUPCEANExtension:</span>
            <span class="keyword">return</span> @<span class="string">"UPC/EAN extension"</span>;
<span class="label">
        default:</span>
            <span class="keyword">return</span> @<span class="string">"Unknown"</span>;
    }
}
</code></pre><p>pragma mark - ZXCaptureDelegate Methods</p>
<pre><code>- (<span class="type">void</span>)captureResult:(<span class="type">ZXCapture</span> *)capture <span class="literal">result</span>:(<span class="type">ZXResult</span> *)<span class="literal">result</span> {

    <span class="keyword">if</span> ( !_stop &amp;&amp; !<span class="literal">result</span> )
    {
        <span class="keyword">return</span>;
      }
    [self <span class="type">GoVCWithKey</span>:<span class="literal">result</span>.text];
    _stop = <span class="type">YES</span>;
//    <span class="type">NSString</span> *display = [<span class="type">NSString</span> stringWithFormat:@<span class="string">"Scanned!\n\nFormat: %@\n\nContents:\n%@"</span>, formatString, <span class="literal">result</span>.text];
//    <span class="type">DLog</span>(@<span class="string">"display = %@"</span>,display);

    // <span class="type">Vibrate</span>
//    <span class="type">AudioServicesPlaySystemSound</span>(kSystemSoundID_Vibrate);
//    dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="number">3</span> * <span class="type">NSEC_PER_SEC</span>), dispatch_get_main_queue(), ^{
//        _stop = <span class="type">NO</span>;
//    });
}
</code></pre><p><strong>相册扫描关键代码</strong></p>
<pre><code><span class="comment">#pragma mark</span>
<span class="comment">#pragma mark otherAction</span>
- (<span class="type">void</span>)getQRCodeFromImageLibrary
{
    <span class="type">UIImagePickerController</span> *picker = [[<span class="type">UIImagePickerController</span> alloc] init];
    picker.allowsEditing = <span class="type">YES</span>;
    picker.delegate = self;
    picker.sourceType = <span class="type">UIImagePickerControllerSourceTypePhotoLibrary</span>;
    picker.navigationBar.barTintColor = <span class="type">KTHEME_COLOR</span>;
    picker.navigationBar.titleTextAttributes = @{<span class="type">NSForegroundColorAttributeName</span>:<span class="type">KCOLOR_WHITE</span>,<span class="type">NSFontAttributeName</span>:<span class="type">KSYSTEM_FONT_BOLD_</span>(<span class="number">18</span>)};
    picker.navigationBar.tintColor = <span class="type">KCOLOR_WHITE</span>;
    [picker.navigationBar setTranslucent:<span class="type">NO</span>];
    [self presentViewController:picker animated:<span class="type">YES</span> completion:^{}];
}
<span class="comment">#pragma mark - UIImagePickerControllerDelegate</span>
- (<span class="type">void</span>)imagePickerController:(<span class="type">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="type">NSDictionary</span> *)info
{
    <span class="type">UIImage</span> *image = [info objectForKey:@<span class="string">"UIImagePickerControllerEditedImage"</span>];
    [self dismissViewControllerAnimated:<span class="type">YES</span> completion:^{
        [self getURLWithImage:image];
    }
    ];
}
-(<span class="type">void</span>)imagePickerControllerDidCancel:(<span class="type">UIImagePickerController</span> *)picker
{
    [picker dismissViewControllerAnimated:<span class="type">YES</span> completion:^() {
        [[<span class="type">UIApplication</span> sharedApplication] setStatusBarStyle:<span class="type">UIStatusBarStyleLightContent</span> animated:<span class="type">YES</span>];
    }];
}
-(<span class="type">void</span>)getURLWithImage:(<span class="type">UIImage</span> *)img{

    <span class="type">UIImage</span> *loadImage= img;
    <span class="type">CGImageRef</span> imageToDecode = loadImage.<span class="type">CGImage</span>;

    <span class="type">ZXLuminanceSource</span> *source = [[<span class="type">ZXCGImageLuminanceSource</span> alloc] initWithCGImage:imageToDecode];
    <span class="type">ZXBinaryBitmap</span> *bitmap = [<span class="type">ZXBinaryBitmap</span> binaryBitmapWithBinarizer:[<span class="type">ZXHybridBinarizer</span> binarizerWithSource:source]];
    <span class="type">NSError</span> *error = <span class="keyword">nil</span>;

    <span class="type">ZXDecodeHints</span> *hints = [<span class="type">ZXDecodeHints</span> hints];
    <span class="type">ZXMultiFormatReader</span> *reader = [<span class="type">ZXMultiFormatReader</span> reader];
    <span class="type">ZXResult</span> *<span class="literal">result</span> = [reader decode:bitmap
                                hints:hints
                                error:&amp;error];
    <span class="keyword">if</span> (<span class="literal">result</span>) {
        // <span class="type">The</span> coded <span class="literal">result</span> <span class="keyword">as</span> a <span class="type">string</span>. <span class="type">The</span> raw data can be accessed <span class="keyword">with</span>
        // <span class="literal">result</span>.rawBytes <span class="keyword">and</span> <span class="literal">result</span>.length.
        <span class="type">NSString</span> *contents = <span class="literal">result</span>.text;
        [self <span class="type">GoVCWithKey</span>:contents];
    } <span class="keyword">else</span> {
        <span class="type">UIAlertView</span> *alter1 = [[<span class="type">UIAlertView</span> alloc] initWithTitle:@<span class="string">"解析失败"</span> message:<span class="keyword">nil</span> delegate:<span class="keyword">nil</span> cancelButtonTitle:@<span class="string">"确定"</span> otherButtonTitles: <span class="keyword">nil</span>];
        [alter1 show];
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>二维码扫描 本人用的是zxing第三方库 关于zxing 请自行百度</p>
<p>使用教程 通过cocoapod 加入zixng</p>
<pre><code><span class="rule"><span class="attribute">platform </sp]]>
    </summary>
    
      <category term="二维码扫描" scheme="http://yoursite.com/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS9系统适配问题]]></title>
    <link href="http://yoursite.com/2015/09/18/IOS9%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/09/18/IOS9适配问题/</id>
    <published>2015-09-18T11:06:03.000Z</published>
    <updated>2015-09-28T02:35:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong>前天苹果发布了ios9的推送 小编第一时间更新了系统和xcode7 现在将遇到的问题总结一下
</strong></p>
<p>##<font color="green">问题1 关于编译报错bitcode</font><br>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
<p>要么让第三方库支持，要么关闭target的bitcode选项。</p>
<p><strong>实际上在Xcode 7中，我们新建一个iOS程序时，bitcode选项默认是设置为YES的。我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到这个设置。</strong></p>
<p>不过，我们现在需要考虑的是三个平台：iOS，Mac OS，watchOS。</p>
<p>对应iOS，bitcode是可选的。<br>对于watchOS，bitcode是必须的。<br>Mac OS不支持bitcode。</p>
<p>解决方法:在设置中关了关闭bitcode即可</p>
<p>##<font color="green">问题2 关于ios应用跳转问题</font><br>ios9 支付宝不能跳转<br><a href="http://dev.umeng.com/social/ios/ios9#2" target="_blank" rel="external">http://dev.umeng.com/social/ios/ios9#2</a><br>友盟已经做了很详细的解释 不多说什么 支付宝对应的是alipay 参照微信的写法即可</p>
<p>##<font color="green">问题3 http请求问题</font><br>app中加上这句话</p>
<pre><code><span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
<span class="tag">&lt;<span class="title">dict</span>&gt;</span>
    <span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
    <span class="tag">&lt;<span class="title">true</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">dict</span>&gt;</span>

如果实用的是https 不用关注
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前天苹果发布了ios9的推送 小编第一时间更新了系统和xcode7 现在将遇到的问题总结一下
</strong></p>
<p>##<font color="green">问题1 关于编译报错bitcode</font><br>You must rebuil]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Andriod]]></title>
    <link href="http://yoursite.com/2015/08/29/%E5%85%B3%E4%BA%8EAndriod/"/>
    <id>http://yoursite.com/2015/08/29/关于Andriod/</id>
    <published>2015-08-29T08:12:20.000Z</published>
    <updated>2015-08-29T08:16:13.000Z</updated>
    <content type="html"><![CDATA[<p>最近这几天在看andriod的视频 ，作为一名ios开发者看andriod也许不是一个明智的选择。但是不知道为什么最近写程序，老是觉得ios是封闭的，写起来很不爽。而且最近也看完了&lt;从0到1&gt;这本书还是有点感触的，作为一个屌丝来说，确实需要做好abz计划，也许andriod是我的b计划，只能对自己说：加油！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近这几天在看andriod的视频 ，作为一名ios开发者看andriod也许不是一个明智的选择。但是不知道为什么最近写程序，老是觉得ios是封闭的，写起来很不爽。而且最近也看完了&lt;从0到1&gt;这本书还是有点感触的，作为一个屌丝来说，确实需要做好abz计划，也许a]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ARC下内存释放]]></title>
    <link href="http://yoursite.com/2015/08/28/ARC%E4%B8%8B%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>http://yoursite.com/2015/08/28/ARC下内存释放/</id>
    <published>2015-08-28T00:40:50.000Z</published>
    <updated>2015-08-28T00:40:50.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-播放在线视频]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-%E6%92%AD%E6%94%BE%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2015/08/24/IOS-播放在线视频/</id>
    <published>2015-08-24T01:13:41.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="第一种：">第一种：</h3><p>//UIWebView 加在网络视频 在线播放  有声音</p>
<p>UIWebView *myWeb = [[UIWebView alloc] initWithFrame:self.view.bounds];</p>
<p>NSURL *url = [NSURLURLWithString:@”<br><a href="http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8" target="_blank" rel="external">http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8</a>“];<br><a href="http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8//这里也可以是" target="_blank" rel="external">http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8//这里也可以是</a> mp4</p>
<p>NSURLRequest *request = [NSURLRequest requestWithURL:url];</p>
<p>[myWeb setDelegate:self];</p>
<p>[myWeb loadRequest:request];</p>
<p>[self.view addSubview:myWeb];</p>
<h3 id="第二种：">第二种：</h3><p>//AVPlayerLayer 播放在线视频  无声音</p>
<p>NSURL *sourceMovieURL = [NSURL URLWithString:@”<a href="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4" target="_blank" rel="external">http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</a>“];</p>
<p>AVAsset *movieAsset    = [AVURLAsset URLAssetWithURL:sourceMovieURLoptions:nil];</p>
<p>AVPlayerItem *playerItem = [AVPlayerItem playerItemWithAsset:movieAsset];</p>
<p>AVPlayer *player = [AVPlayer playerWithPlayerItem:playerItem];</p>
<p>AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:player];</p>
<p>playerLayer.frame = self.view.layer.bounds;</p>
<p>playerLayer.videoGravity = AVLayerVideoGravityResizeAspect;</p>
<p>[self.view.layer addSublayer:playerLayer];</p>
<p>转载请标明出处，黄志勇的个人博客！</p>
<p>[player play];</p>
<h3 id="第三种：">第三种：</h3><p>//MPMoviePlayerController 播放在线视频  无声音</p>
<p>NSURL *videoURL = [NSURLURLWithString:@”<a href="https://s3.amazonaws.com/adplayer/colgate.mp4" target="_blank" rel="external">https://s3.amazonaws.com/adplayer/colgate.mp4</a>“];</p>
<p>MPMoviePlayerViewcontroller *moviePlayerController = [[MPMoviePlayerViewcontroller alloc] initWithContentURL:videoURL];</p>
<p>moviePlayerController.moviePlayer.movieSourceType = MPMovieSourceTypeFile;</p>
<p>moviePlayerController.moviePlayer.shouldAutoplay = YES;</p>
<p>//moviePlayerController.moviePlayer.controlStyle = MPMovieControlStyleNone;</p>
<p>[moviePlayerController.moviePlayer prepareToPlay];</p>
<p>[moviePlayerController.moviePlayer play];</p>
<p>[[NSnotificationCenter defaultCenter]</p>
<p>addObserver: self</p>
<p>selector: @selector(myMovieFinishedCallback:)</p>
<p>name: MPMoviePlayerPlaybackDidFinishnotification</p>
<p>object: moviePlayerController];</p>
<p>[self presentMoviePlayerViewcontrollerAnimated:moviePlayerController];</p>
<h3 id="题记">题记</h3><p>简单的视频在线播放,可以使用第三方框架MWphotoborwser</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="第一种：">第一种：</h3><p>//UIWebView 加在网络视频 在线播放  有声音</p>
<p>UIWebView *myWeb = [[UIWebView alloc] initWithFrame:self.view.bounds];</p>
<p>]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-摇一摇]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-%E6%91%87%E4%B8%80%E6%91%87/"/>
    <id>http://yoursite.com/2015/08/24/IOS-摇一摇/</id>
    <published>2015-08-24T01:06:08.000Z</published>
    <updated>2015-09-28T02:30:50.000Z</updated>
    <content type="html"><![CDATA[<pre><code><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span>

<span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> ()</span>

<span class="keyword">@end</span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span>

<span class="comment">/**
 *  开始摇晃就会调用
 */</span>
- (<span class="keyword">void</span>)motionBegan:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}
<span class="comment">/**
 *  摇晃结束就会调用
 */</span>
- (<span class="keyword">void</span>)motionEnded:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}
<span class="comment">/**
 *  摇晃被打断就会调用
 */</span>
- (<span class="keyword">void</span>)motionCancelled:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}

<span class="keyword">@end</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<pre><code><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span>

<span class="class"><span class="keyword">@]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-CoreMotion]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-CoreMotion/"/>
    <id>http://yoursite.com/2015/08/24/IOS-CoreMotion/</id>
    <published>2015-08-24T01:04:52.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreMotion/CoreMotion.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CMMotionManager *mgr;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建coreMotion管理者</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = [[CMMotionManager alloc] init];</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.isAccelerometerAvailable</span>) &#123;</span><br><span class="line">          <span class="comment">// 3.开始采样</span></span><br><span class="line">         [<span class="keyword">self</span><span class="variable">.mgr</span> startAccelerometerUpdates]; <span class="comment">// pull</span></span><br><span class="line">     &#125;<span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    CMAcceleration acceleration = <span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.accelerometerData</span><span class="variable">.acceleration</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span> , acceleration<span class="variable">.z</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)push</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.创建coreMotion管理者</span></span><br><span class="line">    <span class="comment">//    CMMotionManager *mgr = [[CMMotionManager alloc] init];</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = [[CMMotionManager alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.判断加速计是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.isAccelerometerAvailable</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         isAccelerometerActive 是否正在采集</span><br><span class="line">         accelerometerData 采集到得数据</span><br><span class="line">         startAccelerometerUpdates  pull</span><br><span class="line">         startAccelerometerUpdatesToQueue  push</span><br><span class="line">         stopAccelerometerUpdates 停止采集</span><br><span class="line">         accelerometerUpdateInterval 采样时间</span><br><span class="line">         */</span></span><br><span class="line">        <span class="comment">// 3.设置采样时间</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.accelerometerUpdateInterval</span> = <span class="number">1</span> / <span class="number">30.0</span>;</span><br><span class="line">        <span class="comment">// 4.开始采样</span></span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.mgr</span> startAccelerometerUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(CMAccelerometerData *accelerometerData, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            <span class="comment">// 这个block是采集到数据时就会调用</span></span><br><span class="line">            <span class="keyword">if</span> (error) <span class="keyword">return</span> ;</span><br><span class="line">            CMAcceleration acceleration = accelerometerData<span class="variable">.acceleration</span>;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span> , acceleration<span class="variable">.z</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-UIAccelerometer]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-UIAccelerometer/"/>
    <id>http://yoursite.com/2015/08/24/IOS-UIAccelerometer/</id>
    <published>2015-08-24T01:01:57.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UIView+Extension.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UIAccelerometerDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  小球</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageBall;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  保存速度</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span>  velocity;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.利用单利获取采集对象</span></span><br><span class="line">    <span class="built_in">UIAccelerometer</span> *acc = [<span class="built_in">UIAccelerometer</span> sharedAccelerometer];</span><br><span class="line">    <span class="comment">// 2.设置代理</span></span><br><span class="line">    acc<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">// 3.设置采样时间</span></span><br><span class="line">    acc<span class="variable">.updateInterval</span> = <span class="number">1</span> / <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark -UIAccelerometerDelegate</span></span><br><span class="line"><span class="comment">// 4.实现代理方法</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要采集到数据就会调用(调用频率非常高)</span><br><span class="line"> *</span><br><span class="line"> *  @param accelerometer 触发事件的对象</span><br><span class="line"> *  @param acceleration  获取到得数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)accelerometer:(<span class="built_in">UIAccelerometer</span> *)accelerometer didAccelerate:(<span class="built_in">UIAcceleration</span> *)acceleration</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"x = %f / y = %f / z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span>, acceleration<span class="variable">.z</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     速度 = 加速度 * 时间</span><br><span class="line">     V = at;  ==  a * t1 + a * t2 + a * t3 ....;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="comment">// 不能直接修改对象的结构体属性的成员</span></span><br><span class="line"><span class="comment">//    self.velocity.x += acceleration.x;</span></span><br><span class="line">    _velocity<span class="variable">.x</span> += acceleration<span class="variable">.x</span>;</span><br><span class="line">    <span class="comment">// -=的原因是因为获取到得Y轴的加速度和UIKit的坐标系的Y的值是相反的, 而我们将来想让小球往加速度的反方向运动, 所以 -=;</span></span><br><span class="line">    _velocity<span class="variable">.y</span> -= acceleration<span class="variable">.y</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     </span><br><span class="line">    移动的距离 = 速度 * 时间</span><br><span class="line">    S = vt; == v * t1 + v * t2 + v * t3 ....;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> += _velocity<span class="variable">.x</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> += _velocity<span class="variable">.y</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 边界检测</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 超出了屏幕的左边</span></span><br><span class="line">        _velocity<span class="variable">.x</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 超出屏幕的顶部</span></span><br><span class="line">        _velocity<span class="variable">.y</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.frame</span>) &gt;= <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.height</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.height</span> - <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.height</span>;</span><br><span class="line">        <span class="comment">// 查出屏幕的底部</span></span><br><span class="line">        _velocity<span class="variable">.y</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectGetMaxX</span>(<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.frame</span>) &gt;= <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.width</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.width</span> - <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.width</span>;</span><br><span class="line">        <span class="comment">// 查出屏幕的右边</span></span><br><span class="line">        _velocity<span class="variable">.x</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS距离传感器]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS%E8%B7%9D%E7%A6%BB%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2015/08/24/IOS距离传感器/</id>
    <published>2015-08-24T00:59:42.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.开启距离传感器(注意: 默认情况距离传感器是关闭的)</span></span><br><span class="line"><span class="comment">//    [UIApplication sharedApplication].proximitySensingEnabled = YES;</span></span><br><span class="line">    <span class="comment">// 只要开启之后, 就开始实时监听</span></span><br><span class="line">    [<span class="built_in">UIDevice</span> currentDevice]<span class="variable">.proximityMonitoringEnabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.当监听到有物体靠近设备时系统会发出通知</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(proximityStateDidChange:) name:<span class="built_in">UIDeviceProximityStateDidChangeNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当监听到有物体靠近设备时调用</span></span><br><span class="line">- (<span class="keyword">void</span>)proximityStateDidChange:(<span class="built_in">NSNotification</span> *)note</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%@", note);</span></span><br><span class="line">   <span class="keyword">if</span>( [<span class="built_in">UIDevice</span> currentDevice]<span class="variable">.proximityState</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"有物体靠近"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"物体离开"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蓝牙设备]]></title>
    <link href="http://yoursite.com/2015/08/24/%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2015/08/24/蓝牙设备/</id>
    <published>2015-08-24T00:53:00.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="蓝牙设备的基本使用代码">蓝牙设备的基本使用代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#include <span class="title">&lt;GameKit/GameKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UINavigationControllerDelegate</span>, <span class="title">UIImagePickerControllerDelegate</span>, <span class="title">GKPeerPickerControllerDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)connect;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  选择图片</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)selectedPhoto;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  发送</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *customIV;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  会话</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GKSession *session;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)connect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建选择其他蓝牙设备的控制器</span></span><br><span class="line">    GKPeerPickerController *peerPk = [[GKPeerPickerController alloc] init];</span><br><span class="line">    <span class="comment">// 2.成为该控制器的代理</span></span><br><span class="line">    peerPk<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">// 3.显示蓝牙控制器</span></span><br><span class="line">    [peerPk show];</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - GKPeerPickerControllerDelegate</span></span><br><span class="line"><span class="comment">// 4.实现dialing方法</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  当蓝牙设备连接成功就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param picker  触发时间的控制器</span><br><span class="line"> *  @param peerID  连接蓝牙设备的ID</span><br><span class="line"> *  @param session 连接蓝牙的会话(可用通讯), 以后只要拿到session就可以传输数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(<span class="built_in">NSString</span> *)peerID toSession:(GKSession *)session</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, peerID);</span><br><span class="line">    <span class="comment">// 1.保存会话</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.session</span> = session;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.设置监听接收传递过来的数据</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     Handler: 谁来处理接收到得数据</span><br><span class="line">     withContext: 传递数据</span><br><span class="line">     */</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> setDataReceiveHandler:<span class="keyword">self</span> withContext:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.关闭显示蓝牙设备控制器</span></span><br><span class="line">    [picker dismiss];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  接收到其它设备传递过来的数据就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param data    传递过来的数据</span><br><span class="line"> *  @param peer    传递数据设备的ID</span><br><span class="line"> *  @param session 会话</span><br><span class="line"> *  @param context 注册监听时传递的数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) receiveData:(<span class="built_in">NSData</span> *)data fromPeer:(<span class="built_in">NSString</span> *)peer inSession: (GKSession *)session context:(<span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%s", __func__);</span></span><br><span class="line">    <span class="comment">// 1.将传递过来的数据转换为图片(注意: 因为发送的时图片, 所以才需要转换为图片)</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span> = image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)peerPickerControllerDidCancel:(GKPeerPickerController *)picker</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)send &#123;</span><br><span class="line">    <span class="comment">// 利用session发送图片数据即可</span></span><br><span class="line">    <span class="comment">// 1.取出customImageView上得图片, 转换为二进制</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image =  <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span>;</span><br><span class="line">    <span class="built_in">NSData</span> *data = <span class="built_in">UIImagePNGRepresentation</span>(image);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     GKSendDataReliable, 数据安全的发送模式, 慢</span><br><span class="line">     GKSendDataUnreliable, 数据不安全的发送模式, 快</span><br><span class="line">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     data: 需要发送的数据</span><br><span class="line">     DataReliable: 是否安全的发送数据(发送数据的模式)</span><br><span class="line">     error: 是否监听发送错误</span><br><span class="line">     */</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> sendDataToAllPeers:data withDataMode:GKSendDataReliable error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)selectedPhoto</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建图片选择控制器</span></span><br><span class="line">    <span class="built_in">UIImagePickerController</span> *imagePk = [[<span class="built_in">UIImagePickerController</span> alloc] init];</span><br><span class="line">    <span class="comment">// 2.判断图库是否可用打开</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 3.设置打开图库的类型</span></span><br><span class="line">        imagePk<span class="variable">.sourceType</span> = <span class="built_in">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>;</span><br><span class="line">        </span><br><span class="line">        imagePk<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.打开图片选择控制器</span></span><br><span class="line">        [<span class="keyword">self</span> presentViewController:imagePk animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - UIImagePickerControllerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span> *)info</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%@", info);</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span> = info[<span class="built_in">UIImagePickerControllerOriginalImage</span>];</span><br><span class="line">    </span><br><span class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>##CoreBluetooth</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">CBCentralManagerDelegate</span>, <span class="title">CBPeripheralDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  外设</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *peripherals;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  中心管理者</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CBCentralManager *mgr;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)peripherals</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_peripherals) &#123;</span><br><span class="line">        _peripherals = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _peripherals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建中心设备</span></span><br><span class="line">    CBCentralManager *mgr = [[CBCentralManager alloc] init];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = mgr;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    mgr<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.利用中心设备扫描外部设备</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     如果指定数组代表只扫描指定的设备</span><br><span class="line">     */</span></span><br><span class="line">    [mgr scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - CBCentralManagerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(<span class="built_in">NSDictionary</span> *)advertisementData RSSI:(<span class="built_in">NSNumber</span> *)RSSI</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存扫描到得外部设备</span></span><br><span class="line">    <span class="comment">// 判断如果数组中不包含当前扫描到得外部设置才保存</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span><span class="variable">.peripherals</span> containsObject:peripheral]) &#123;</span><br><span class="line">        </span><br><span class="line">        peripheral<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.peripherals</span> addObject:peripheral];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  模拟点击, 然后连接所有的外设</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)start</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (CBPeripheral *peripheral <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.peripherals</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         *  连接外设</span><br><span class="line">         */</span></span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.mgr</span> connectPeripheral:peripheral options:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接外设成功调用</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 扫描外设中得服务</span></span><br><span class="line">    [peripheral discoverServices:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接外设失败调用</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma makr - CBPeripheralDelegate</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要扫描到服务就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param peripheral 服务所在的外设</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取外设中所有扫描到得服务</span></span><br><span class="line">    <span class="built_in">NSArray</span> *services = peripheral<span class="variable">.services</span>;</span><br><span class="line">    <span class="keyword">for</span> (CBService *service <span class="keyword">in</span> services) &#123;</span><br><span class="line">        <span class="comment">// 拿到需要的服务</span></span><br><span class="line">        <span class="keyword">if</span> ([service<span class="variable">.UUID</span><span class="variable">.UUIDString</span> isEqualToString:<span class="string">@"123"</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从需要的服务中查找需要的特征</span></span><br><span class="line">            <span class="comment">// 从peripheral中得service中扫描特征</span></span><br><span class="line">            [peripheral discoverCharacteristics:<span class="literal">nil</span> forService:service];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要扫描到特征就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param peripheral 特征所属的外设</span><br><span class="line"> *  @param service    特征所属的服务</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拿到服务中所有的特诊</span></span><br><span class="line">    <span class="built_in">NSArray</span> *characteristics =  service<span class="variable">.characteristics</span>;</span><br><span class="line">    <span class="comment">// 遍历特征, 拿到需要的特征处理</span></span><br><span class="line">    <span class="keyword">for</span> (CBCharacteristic * characteristic <span class="keyword">in</span> characteristics) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([characteristic<span class="variable">.UUID</span><span class="variable">.UUIDString</span> isEqualToString:<span class="string">@"8888"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"设置闹钟"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="蓝牙设备的基本使用代码">蓝牙设备的基本使用代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[改变nstimer的runloopmode]]></title>
    <link href="http://yoursite.com/2015/08/21/%E6%94%B9%E5%8F%98nstimer%E7%9A%84runloopmode/"/>
    <id>http://yoursite.com/2015/08/21/改变nstimer的runloopmode/</id>
    <published>2015-08-21T09:41:03.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSRunLoop</span> *rp  = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">[rp addTimer:<span class="keyword">self</span><span class="variable">.topAdView</span><span class="variable">.timer</span> forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>
<p>改变nstimer的runloop模式,防止uiscrollow滚动时影响定时器的正常使用</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre>]]>
    </summary>
    
      <category term="NSRunLoop" scheme="http://yoursite.com/tags/NSRunLoop/"/>
    
      <category term="NSRunLoop" scheme="http://yoursite.com/categories/NSRunLoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于swift]]></title>
    <link href="http://yoursite.com/2015/08/21/%E5%85%B3%E4%BA%8Eswift/"/>
    <id>http://yoursite.com/2015/08/21/关于swift/</id>
    <published>2015-08-21T02:20:27.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>接触IOS开始已经快三年了,oc也差不多使用两年了,从去年知道apple新推出了swift开始就在想。swift也许就像玩具一样，昙花一现，终不能取代oc20年的拼杀，然而时至今日，却突然觉得，swift已兵临城下，就待和oc一战高下，从2015wwdc大会上swift发出了最后一张战书，今年年底即将开源，2016必将是ios腥风血雨的一年。<br>今天没什么事情打开github的高级搜索，蓦然发现swift已经上类似于afn的项目Alamofire已经有10000的star 最近特喜欢的reactivecocoa 在说明中明确的说出了更多新功能只会在swift中推出。唉！<br>该来的总会来，来吧让这场编程争夺战来的更猛烈些吧，反正我又不乱来，接下来的一个月，要认真学习了，加油！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>接触IOS开始已经快三年了,oc也差不多使用两年了,从去年知道apple新推出了swift开始就在想。swift也许就像玩具一样，昙花一现，终不能取代oc20年的拼杀，然而时至今日，却突然觉得，swift已兵临城下，就待和oc一战高下，从2015wwdc大会上swift发出]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[block写递归]]></title>
    <link href="http://yoursite.com/2015/08/20/block%E5%86%99%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2015/08/20/block写递归/</id>
    <published>2015-08-20T07:34:42.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">static</span> <span class="built_in">int</span> (^sumBlock)(<span class="built_in">int</span>) = ^ (<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span> + sumBlock(<span class="built_in">num</span> - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注意，要做到自己调用自己，需要能够准确的在内存中找到 block 的函数入口，因此需要使用 static 修饰符号，其他就没啥了</strong></p>
<ul>
<li>每调用一次自己，系统都会开辟一个栈桢记录临时变量和参数</li>
<li>递归次数过多，会出现栈溢出错误</li>
<li>移动开发中不建议使用递归算法，现在主线程栈区只有 512K</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[隐藏UInavigationBar下的黑边]]></title>
    <link href="http://yoursite.com/2015/08/19/%E9%9A%90%E8%97%8FUInavigationBar%E4%B8%8B%E7%9A%84%E9%BB%91%E8%BE%B9/"/>
    <id>http://yoursite.com/2015/08/19/隐藏UInavigationBar下的黑边/</id>
    <published>2015-08-19T08:55:22.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>本文参考<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line" target="_blank" rel="external">StackOverFlow</a></p>
<h3 id="在基类中">在基类中</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> *navigationBar = <span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.navigationBar</span>;</span><br><span class="line"> [navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:KTHEME_COLOR size:<span class="built_in">CGSizeMake</span>(SCREEN_WIDTH, <span class="number">1</span>)]</span><br><span class="line">                    forBarPosition:<span class="built_in">UIBarPositionAny</span></span><br><span class="line">                        barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"> [navigationBar setShadowImage:[<span class="built_in">UIImage</span> new]];</span><br></pre></td></tr></table></figure>
<p>imageWithColor 是一个分类在前边文章中出现过</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文参考<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line" target="_blank" rel="external"]]>
    </summary>
    
      <category term="实用小工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ImageWithColor]]></title>
    <link href="http://yoursite.com/2015/08/19/ImageWithColor/"/>
    <id>http://yoursite.com/2015/08/19/ImageWithColor/</id>
    <published>2015-08-19T08:23:27.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">Color</span>)  </span></span><br><span class="line">  </span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">@end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">Color</span>)  </span></span><br><span class="line">  </span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size<span class="variable">.width</span>, size<span class="variable">.height</span>);  </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(rect<span class="variable">.size</span>);  </span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();  </span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context,color<span class="variable">.CGColor</span>);  </span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);  </span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();  </span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> img;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="实用小工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立一个简单的图片浏览器]]></title>
    <link href="http://yoursite.com/2015/08/19/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://yoursite.com/2015/08/19/如何建立一个简单的图片浏览器/</id>
    <published>2015-08-19T03:47:44.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>##构建一个简单的photoBorwser</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##构建一个简单的photoBorwser</p>
]]>
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解Objective-C:Category]]></title>
    <link href="http://yoursite.com/2015/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Objective-C%EF%BC%9ACategory/"/>
    <id>http://yoursite.com/2015/08/18/深入理解Objective-C：Category/</id>
    <published>2015-08-18T09:31:12.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>本篇转载于:<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">美团技术博客</a> </p>
<h2 id="摘要">摘要</h2><p>无论一个类设计的多么完美，在未来的需求演进中，都有可能会碰到一些无法预测的情况。那怎么扩展已有的类呢？一般而言，继承和组合是不错的选择。但是在Objective-C 2.0中，又提供了category这个语言特性，可以动态地为已有类添加新行为。如今category已经遍布于Objective-C代码的各个角落，从Apple官方的framework到各个开源框架，从功能繁复的大型APP到简单的应用，catagory无处不在。本文对category做了比较全面的整理，希望对读者有所裨益。</p>
<h2 id="简介">简介</h2><p>本文系学习Objective-C的runtime源码时整理所成，主要剖析了category在runtime层的实现原理以及和category相关的方方面面，内容包括：</p>
<ul>
<li>初入宝地-category简介</li>
<li>连类比事-category和extension</li>
<li>挑灯细览-category真面目</li>
<li>追本溯源-category如何加载</li>
<li>旁枝末叶-category和+load方法</li>
<li>触类旁通-category和方法覆盖</li>
<li>更上一层-category和关联对象</li>
</ul>
<h3 id="1、初入宝地-category简介">1、初入宝地-category简介</h3><p>category是Objective-C 2.0之后添加的语言特性，category的主要作用是为已经存在的类添加方法。除此之外，apple还推荐了category的另外两个使用场景1</p>
<ul>
<li>可以把类的实现分开在几个不同的文件里面。这样做有几个显而易见的好处，a)可以减少单个文件的体积 b)可以把不同的功能组织到不同的category里 c)可以由多个开发者共同完成一个类 d)可以按需加载想要的category 等等。</li>
<li><p>声明私有方法<br>不过除了apple推荐的使用场景，广大开发者脑洞大开，还衍生出了category的其他几个使用场景：</p>
</li>
<li><p>模拟多继承</p>
</li>
<li>把framework的私有方法公开</li>
</ul>
<p>Objective-C的这个语言特性对于纯动态语言来说可能不算什么，比如javascript，你可以随时为一个“类”或者对象添加任意方法和实例变量。但是对于不是那么“动态”的语言而言，这确实是一个了不起的特性。</p>
<h3 id="2、连类比事-category和extension">2、连类比事-category和extension</h3><p>extension看起来很像一个匿名的category，但是extension和有名字的category几乎完全是两个东西。 extension在编译期决议，它就是类的一部分，在编译期和头文件里的@interface以及实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，亦随之一起消亡。extension一般用来隐藏类的私有信息，你必须有一个类的源码才能为一个类添加extension，所以你无法为系统的类比如NSString添加extension。（详见2）</p>
<p>但是category则完全不一样，它是在运行期决议的。<br>就category和extension的区别来看，我们可以推导出一个明显的事实，extension可以添加实例变量，而category是无法添加实例变量的（因为在运行期，对象的内存布局已经确定，如果添加实例变量就会破坏类的内部布局，这对编译型语言来说是灾难性的）。</p>
<h2 id="3、挑灯细览-category真面目">3、挑灯细览-category真面目</h2><p>我们知道，所有的OC类和对象，在runtime层都是用struct表示的，category也不例外，在runtime层，category用结构体category_t（在objc-runtime-new.h中可以找到此定义），它包含了<br>1)、类的名字（name）<br>2)、类（cls）<br>3)、category中所有给类添加的实例方法的列表（instanceMethods）<br>4)、category中所有添加的类方法的列表（classMethods）<br>5)、category实现的所有协议的列表（protocols）<br>6)、category中添加的所有属性（instanceProperties）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="keyword">category_t</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">classref_t</span> cls;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">method_list_t</span> *instanceMethods;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">method_list_t</span> *classMethods;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">protocol_list_t</span> *protocols;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">property_list_t</span> *instanceProperties;</span><br><span class="line">&#125; <span class="keyword">category_t</span>;</span><br></pre></td></tr></table></figure>
<p>从category的定义也可以看出category的可为（可以添加实例方法，类方法，甚至可以实现协议，添加属性）和不可为（无法添加实例变量）。<br>ok，我们先去写一个category看一下category到底为何物：<br><strong>MyClass.h：
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span>(<span class="title">MyAddition</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>MyClass.m：
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"MyClass"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span>(<span class="title">MyAddition</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"MyAddition"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>我们使用clang的命令去看看category到底会变成什么：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">clang</span> <span class="tag">-rewrite-objc</span> <span class="tag">MyClass</span><span class="class">.m</span></span><br></pre></td></tr></table></figure>
<p>好吧，我们得到了一个3M大小，10w多行的.cpp文件（这绝对是Apple值得吐槽的一点），我们忽略掉所有和我们无关的东西，在文件的最后，我们找到了如下代码片段：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_method_list_t*/</span> &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _objc_method)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> method_count;</span><br><span class="line"><span class="keyword">struct</span> _objc_method method_list[<span class="number">1</span>];</span><br><span class="line">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line"><span class="keyword">sizeof</span>(_objc_method),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">&#123;&#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"printName"</span>, <span class="string">"v16@0:8"</span>, (<span class="keyword">void</span> *)_I_MyClass_MyAddition_printName&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_prop_list_t*/</span> &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _prop_t)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count_of_properties;</span><br><span class="line"><span class="keyword">struct</span> <span class="keyword">_prop_t</span> prop_list[<span class="number">1</span>];</span><br><span class="line">&#125; _OBJC_$_PROP_LIST_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">_prop_t</span>),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">&#123;&#123;<span class="string">"name"</span>,<span class="string">"T@\"NSString\",C,N"</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> __declspec(dllexport) <span class="keyword">struct</span> <span class="keyword">_class_t</span> OBJC_CLASS_$_MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_category_t</span> _OBJC_$_CATEGORY_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"MyClass"</span>,</span><br><span class="line"><span class="number">0</span>, <span class="comment">// &amp;OBJC_CLASS_$_MyClass,</span></span><br><span class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> <span class="keyword">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> <span class="keyword">_prop_list_t</span> *)&amp;_OBJC_$_PROP_LIST_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition(<span class="keyword">void</span> ) &#123;</span><br><span class="line">_OBJC_$_CATEGORY_MyClass_$_MyAddition.cls = &amp;OBJC_CLASS_$_MyClass;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> section(<span class="string">".objc_inithooks$B"</span>, long, read, write)</span></span><br><span class="line">__declspec(allocate(<span class="string">".objc_inithooks$B"</span>)) <span class="keyword">static</span> <span class="keyword">void</span> *OBJC_CATEGORY_SETUP[] = &#123;</span><br><span class="line">(<span class="keyword">void</span> *)&amp;OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_class_t</span> *L_OBJC_LABEL_CLASS_$ [<span class="number">1</span>] __attribute__((used, section (<span class="string">"__DATA, __objc_classlist,regular,no_dead_strip"</span>)))= &#123;</span><br><span class="line">&amp;OBJC_CLASS_$_MyClass,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_class_t</span> *_OBJC_LABEL_NONLAZY_CLASS_$[] = &#123;</span><br><span class="line">&amp;OBJC_CLASS_$_MyClass,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_category_t</span> *L_OBJC_LABEL_CATEGORY_$ [<span class="number">1</span>] __attribute__((used, section (<span class="string">"__DATA, __objc_catlist,regular,no_dead_strip"</span>)))= &#123;</span><br><span class="line">&amp;_OBJC_$_CATEGORY_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们可以看到:</p>
<ul>
<li>1)、首先编译器生成了实例方法列表OBJC$CATEGORY_INSTANCE_METHODS_MyClass$MyAddition和属性列表_OBJC$PROP_LIST_MyClass$MyAddition，两者的命名都遵循了公共前缀+类名+category名字的命名方式，而且实例方法列表里面填充的正是我们在MyAddition这个category里面写的方法printName，而属性列表里面填充的也正是我们在MyAddition里添加的name属性。还有一个需要注意到的事实就是category的名字用来给各种列表以及后面的category结构体本身命名，而且有static来修饰，所以在同一个编译单元里我们的category名不能重复，否则会出现编译错误。</li>
<li>2)、其次，编译器生成了category本身_OBJC$CATEGORY_MyClass$MyAddition，并用前面生成的列表来初始化category本身。</li>
<li>3)、最后，编译器在DATA段下的objc_catlist section里保存了一个大小为1的category_t的数组L_OBJC_LABEL<em>CATEGORY$（当然，如果有多个category，会生成对应长度的数组^</em>^），用于运行期category的加载。</li>
</ul>
<p>到这里，编译器的工作就接近尾声了，对于category在运行期怎么加载，我们下节揭晓。</p>
<h2 id="4、追本溯源-category如何加载">4、追本溯源-category如何加载</h2><p>我们知道，Objective-C的运行是依赖OC的runtime的，而OC的runtime和其他系统库一样，是OS X和iOS通过dyld动态加载的。<br>想了解更多dyld地同学可以移步这里<a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html" target="_blank" rel="external">（3）</a>。<br>对于OC运行时，入口方法如下（在objc-os.mm文件中）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    lock_init();</span><br><span class="line">    exception_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register for unmap first, in case some +load unmaps something</span></span><br><span class="line">    _dyld_register_func_for_remove_image(&amp;unmap_image);</span><br><span class="line">    dyld_register_image_state_change_handler(dyld_image_state_bound,</span><br><span class="line">                                             <span class="number">1</span><span class="comment">/*batch*/</span>, &amp;map_images);</span><br><span class="line">    dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, <span class="number">0</span><span class="comment">/*not batch*/</span>, &amp;load_images);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>category被附加到类上面是在map_images的时候发生的，在new-ABI的标准下，_objc_init里面的调用的map_images最终会调用objc-runtime-new.mm里面的_read_images方法，而在_read_images方法的结尾，有以下的代码片段：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discover categories. </span></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(EACH_HEADER)</span> &#123;</span><br><span class="line">        category_t <span class="built_in">*</span><span class="built_in">*</span>catlist =</span><br><span class="line">            _getObjc2CategoryList<span class="params">(hi, &amp;count)</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="params">(i = <span class="number">0</span>; i &lt; count; i++)</span> &#123;</span><br><span class="line">            category_t <span class="built_in">*</span>cat = catlist[i];</span><br><span class="line">            class_t <span class="built_in">*</span>cls = remapClass<span class="params">(cat-&gt;cls)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(!cls)</span> &#123;</span><br><span class="line">                <span class="comment">// Category's target class is missing (probably weak-linked).</span></span><br><span class="line">                <span class="comment">// Disavow any knowledge of this category.</span></span><br><span class="line">                catlist[i] = NULL;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: IGNORING category \?\?\?(%s) %p with "</span></span><br><span class="line">                                 <span class="string">"missing weak-linked target class"</span>,</span><br><span class="line">                                 cat-&gt;name, cat)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process this category. </span></span><br><span class="line">            <span class="comment">// First, register the category with its target class. </span></span><br><span class="line">            <span class="comment">// Then, rebuild the class's method lists (etc) if </span></span><br><span class="line">            <span class="comment">// the class is realized. </span></span><br><span class="line">            BOOL classExists = NO;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(cat-&gt;instanceMethods ||  cat-&gt;protocols </span><br><span class="line">                ||  cat-&gt;instanceProperties)</span></span><br><span class="line">            &#123;</span><br><span class="line">                addUnattachedCategoryForClass<span class="params">(cat, cls, hi)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(isRealized<span class="params">(cls)</span>)</span> &#123;</span><br><span class="line">                    remethodizeClass<span class="params">(cls)</span>;</span><br><span class="line">                    classExists = YES;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: found category -%s(%s) %s"</span>,</span><br><span class="line">                                 getName<span class="params">(cls)</span>, cat-&gt;name,</span><br><span class="line">                                 classExists ? <span class="string">"on existing class"</span> : <span class="string">""</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(cat-&gt;classMethods  ||  cat-&gt;protocols </span><br><span class="line">                /* ||  cat-&gt;classProperties */)</span></span><br><span class="line">            &#123;</span><br><span class="line">                addUnattachedCategoryForClass<span class="params">(cat, cls-&gt;isa, hi)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(isRealized<span class="params">(cls-&gt;isa)</span>)</span> &#123;</span><br><span class="line">                    remethodizeClass<span class="params">(cls-&gt;isa)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: found category +%s(%s)"</span>,</span><br><span class="line">                                 getName<span class="params">(cls)</span>, cat-&gt;name)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们拿到的catlist就是上节中讲到的编译器为我们准备的category_t数组，关于是如何加载catlist本身的，我们暂且不表，这和category本身的关系也不大，有兴趣的同学可以去研究以下Apple的二进制格式和load机制。<br>略去PrintConnecting这个用于log的东西，这段代码很容易理解：<br>1)、把category的实例方法、协议以及属性添加到类上<br>2)、把category的类方法和协议添加到类的metaclass上</p>
<p>值得注意的是，在代码中有一小段注释 / || cat-&gt;classProperties /，看来苹果有过给类添加属性的计划啊。<br>ok，我们接着往里看，category的各种列表是怎么最终添加到类上的，就拿实例方法列表来说吧：<br>在上述的代码片段里，addUnattachedCategoryForClass只是把类和category做一个关联映射，而remethodizeClass才是真正去处理添加事宜的功臣。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">static void remethodizeClass<span class="params">(class_t *cls)</span></span><br><span class="line">&#123;</span><br><span class="line">    category_list <span class="built_in">*</span>cats;</span><br><span class="line">    BOOL isMeta;</span><br><span class="line"></span><br><span class="line">    rwlock_assert_writing<span class="params">(&amp;runtimeLock)</span>;</span><br><span class="line"></span><br><span class="line">    isMeta = isMetaClass<span class="params">(cls)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-methodizing: check for more categories</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(<span class="params">(cats = unattachedCategoriesForClass<span class="params">(cls)</span>)</span>)</span> &#123;</span><br><span class="line">        chained_property_list <span class="built_in">*</span>newproperties;</span><br><span class="line">        const protocol_list_t <span class="built_in">*</span><span class="built_in">*</span>newprotos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">            _objc_inform<span class="params">(<span class="string">"CLASS: attaching categories to class '%s' %s"</span>,</span><br><span class="line">                         getName<span class="params">(cls)</span>, isMeta ? <span class="string">"(meta)"</span> : <span class="string">""</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update methods, properties, protocols</span></span><br><span class="line"></span><br><span class="line">        BOOL vtableAffected = NO;</span><br><span class="line">        attachCategoryMethods<span class="params">(cls, cats, &amp;vtableAffected)</span>;</span><br><span class="line"></span><br><span class="line">        newproperties = buildPropertyList<span class="params">(NULL, cats, isMeta)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(newproperties)</span> &#123;</span><br><span class="line">            newproperties-&gt;next = cls-&gt;data<span class="params">()</span>-&gt;properties;</span><br><span class="line">            cls-&gt;data<span class="params">()</span>-&gt;properties = newproperties;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newprotos = buildProtocolList<span class="params">(cats, NULL, cls-&gt;data<span class="params">()</span>-&gt;protocols)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(cls-&gt;data<span class="params">()</span>-&gt;protocols  &amp;&amp;  cls-&gt;data<span class="params">()</span>-&gt;protocols != newprotos)</span> &#123;</span><br><span class="line">            _free_internal<span class="params">(cls-&gt;data<span class="params">()</span>-&gt;protocols)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cls-&gt;data<span class="params">()</span>-&gt;protocols = newprotos;</span><br><span class="line"></span><br><span class="line">        _free_internal<span class="params">(cats)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update method caches and vtables</span></span><br><span class="line">        flushCaches<span class="params">(cls)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(vtableAffected)</span> flushVtables<span class="params">(cls)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而对于添加类的实例方法而言，又会去调用attachCategoryMethods这个方法，我们去看下attachCategoryMethods：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> </span><br><span class="line"><span class="title">attachCategoryMethods</span><span class="params">(class_t *cls, category_list *cats,</span><br><span class="line">                      BOOL *inoutVtablesAffected)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cats) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (PrintReplacedMethods) printReplacements(cls, cats);</span><br><span class="line"></span><br><span class="line">    BOOL isMeta = isMetaClass(cls);</span><br><span class="line">    <span class="keyword">method_list_t</span> **mlists = (<span class="keyword">method_list_t</span> **)</span><br><span class="line">        _malloc_internal(cats-&gt;<span class="function">count * <span class="title">sizeof</span><span class="params">(*mlists)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Count backwards through cats to get newest categories first</span></span><br><span class="line">    <span class="keyword">int</span> mcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = cats-&gt;count;</span><br><span class="line">    BOOL fromBundle = NO;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="keyword">method_list_t</span> *mlist = cat_method_list(cats-&gt;<span class="built_in">list</span>[i].cat, isMeta);</span><br><span class="line">        <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">            mlists[mcount++] = mlist;</span><br><span class="line">            fromBundle |= cats-&gt;<span class="built_in">list</span>[i].fromBundle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attachMethodLists(cls, mlists, mcount, NO, fromBundle, inoutVtablesAffected);</span><br><span class="line"></span><br><span class="line">    _free_internal(mlists);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attachCategoryMethods做的工作相对比较简单，它只是把所有category的实例方法列表拼成了一个大的实例方法列表，然后转交给了attachMethodLists方法（我发誓，这是本节我们看的最后一段代码了^_^），这个方法有点长，我们只看一小段：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (uint32_t m = <span class="number">0</span>;</span><br><span class="line">             (scanForCustomRR || scanForCustomAWZ)  &amp;&amp;  m &lt; mlist-&gt;count;</span><br><span class="line">             m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">SEL</span> sel = method_list_nth(mlist, m)-&gt;name;</span><br><span class="line">            <span class="keyword">if</span> (scanForCustomRR  &amp;&amp;  isRRSelector(sel)) &#123;</span><br><span class="line">                cls-&gt;setHasCustomRR();</span><br><span class="line">                scanForCustomRR = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scanForCustomAWZ  &amp;&amp;  isAWZSelector(sel)) &#123;</span><br><span class="line">                cls-&gt;setHasCustomAWZ();</span><br><span class="line">                scanForCustomAWZ = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Fill</span> <span class="keyword">method</span> list <span class="type">array</span></span><br><span class="line">        newLists[newCount++] = mlist;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    // <span class="type">Copy</span> old methods to the <span class="keyword">method</span> list <span class="type">array</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; oldCount; i++) &#123;</span><br><span class="line">        newLists[newCount++] = oldLists[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的有两点：<br>1)、category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA<br>2)、category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休^_^，殊不知后面可能还有一样名字的方法。</p>
<h3 id="5、旁枝末叶-category和+load方法">5、旁枝末叶-category和+load方法</h3><p>我们知道，在类和category中都可以有+load方法，那么有两个问题：<br>1)、在类的+load方法调用的时候，我们可以调用category中声明的方法么？<br>2)、这么些个+load方法，调用顺序是咋样的呢？<br>鉴于上述几节我们看的代码太多了，对于这两个问题我们先来看一点直观的：<br><img src="http://tech.meituan.com/img/diveintocategory/project.png" alt="image"><br>我们的代码里有MyClass和MyClass的两个category （Category1和Category2），MyClass和两个category都添加了+load方法，并且Category1和Category2都写了MyClass的printName方法。<br>在Xcode中点击Edit Scheme，添加如下两个环境变量（可以在执行load方法以及加载category的时候打印log信息，更多的环境变量选项可参见objc-private.h）:<br><img src="http://tech.meituan.com/img/diveintocategory/environment_vars.png" alt="image"><br>运行项目，我们会看到控制台打印很多东西出来，我们只找到我们想要的信息，顺序如下：</p>
<p>objc[1187]: REPLACED: -[MyClass printName] by category Category1<br>objc[1187]: REPLACED: -[MyClass printName] by category Category2<br>.<br>.<br>.<br>objc[1187]: LOAD: class ‘MyClass’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category1)’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category2)’ scheduled for +load<br>objc[1187]: LOAD: +[MyClass load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category1) load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category2) load]</p>
<p>所以，对于上面两个问题，答案是很明显的：<br>1)、可以调用，因为附加category到类的工作会先于+load方法的执行<br>2)、+load的执行顺序是先类，后category，而category的+load执行顺序是根据编译顺序决定的。<br>目前的编译顺序是这样的：<br><img src="http://tech.meituan.com/img/diveintocategory/compile1.png" alt="image"><br>我们调整一个Category1和Category2的编译顺序，run。ok，我们可以看到控制台的输出顺序变了：<br><img src="http://tech.meituan.com/img/diveintocategory/compile2.png" alt="image"><br>objc[1187]: REPLACED: -[MyClass printName] by category Category2<br>objc[1187]: REPLACED: -[MyClass printName] by category Category1<br>.<br>.<br>.<br>objc[1187]: LOAD: class ‘MyClass’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category2)’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category1)’ scheduled for +load<br>objc[1187]: LOAD: +[MyClass load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category2) load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category1) load]</p>
<p>虽然对于+load的执行顺序是这样，但是对于“覆盖”掉的方法，则会先找到最后一个编译的category里的对应方法。<br>这一节我们只是用很直观的方式得到了问题的答案，有兴趣的同学可以继续去研究一下OC的运行时代码。</p>
<h2 id="6、触类旁通-category和方法覆盖">6、触类旁通-category和方法覆盖</h2><p>鉴于上面几节我们已经把原理都讲了，这一节只有一个问题:<br>怎么调用到原来类中被category覆盖掉的方法？<br>对于这个问题，我们已经知道category其实并不是完全替换掉原来类的同名方法，只是category在方法列表的前面而已，所以我们只要顺着方法列表找到最后一个对应名字的方法，就可以调用原来类的方法：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> currentClass = [<span class="type">MyClass</span> class];</span><br><span class="line"><span class="type">MyClass</span> *my = [[<span class="type">MyClass</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentClass) &#123;</span><br><span class="line">    unsigned <span class="type">int</span> methodCount;</span><br><span class="line">    <span class="type">Method</span> *methodList = class_copyMethodList(currentClass, &amp;methodCount);</span><br><span class="line">    <span class="type">IMP</span> lastImp = <span class="type">NULL</span>;</span><br><span class="line">    <span class="type">SEL</span> lastSel = <span class="type">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSInteger</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="keyword">method</span> = methodList[i];</span><br><span class="line">        <span class="type">NSString</span> *methodName = [<span class="type">NSString</span> stringWithCString:sel_getName(method_getName(<span class="keyword">method</span>)) </span><br><span class="line">                                        encoding:<span class="type">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="keyword">if</span> ([@<span class="string">"printName"</span> isEqualToString:methodName]) &#123;</span><br><span class="line">            lastImp = method_getImplementation(<span class="keyword">method</span>);</span><br><span class="line">            lastSel = method_getName(<span class="keyword">method</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    typedef <span class="type">void</span> (*fn)(id,<span class="type">SEL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastImp != <span class="type">NULL</span>) &#123;</span><br><span class="line">        fn f = (fn)lastImp;</span><br><span class="line">        f(my,lastSel);</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7、更上一层-category和关联对象">7、更上一层-category和关联对象</h2><p>如上所见，我们知道在category里面是无法为category添加实例变量的。但是我们很多时候需要在category中添加和对象关联的值，这个时候可以求助关联对象来实现。<br><strong>MyClass+Category1.h:
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> (<span class="title">Category1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>MyClass+Category1.m:
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass+Category1.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span> (<span class="title">Category1</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"load in Category1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</span><br><span class="line">                             <span class="string">"name"</span>,</span><br><span class="line">                             name,</span><br><span class="line">                             OBJC_ASSO<span class="built_in">CIATION_COPY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *nameObject = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">return</span> nameObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>但是关联对象又是存在什么地方呢？ 如何存储？ 对象销毁时候如何处理关联对象呢？<br>我们去翻一下runtime的源码，在objc-references.mm文件中有个方法_object_set_associative_reference：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">void _object_set_associative_reference<span class="params">(id object, void *key, id value, uintptr_t policy)</span> &#123;</span><br><span class="line">    <span class="comment">// retain the new value (if any) outside the lock.</span></span><br><span class="line">    ObjcAssociation old_association<span class="params">(<span class="number">0</span>, nil)</span>;</span><br><span class="line">    id new_value = value ? acquireValue<span class="params">(value, policy)</span> : nil;</span><br><span class="line">    &#123;</span><br><span class="line">        AssociationsManager manager;</span><br><span class="line">        AssociationsHashMap &amp;associations<span class="params">(manager.associations<span class="params">()</span>)</span>;</span><br><span class="line">        disguised_ptr_t disguised_object = DISGUISE<span class="params">(object)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(new_value)</span> &#123;</span><br><span class="line">            <span class="comment">// break any existing association.</span></span><br><span class="line">            AssociationsHashMap::iterator i = associations.find<span class="params">(disguised_object)</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(i != associations.end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// secondary table exists</span></span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = i-&gt;second;</span><br><span class="line">                ObjectAssociationMap::iterator j = refs-&gt;find<span class="params">(key)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(j != refs-&gt;end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                    old_association = j-&gt;second;</span><br><span class="line">                    j-&gt;second = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="params">(*refs)</span>[key] = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// create the new association (first time).</span></span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = new ObjectAssociationMap;</span><br><span class="line">                associations[disguised_object] = refs;</span><br><span class="line">                <span class="params">(*refs)</span>[key] = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                _class_setInstancesHaveAssociatedObjects<span class="params">(_object_getClass<span class="params">(object)</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// setting the association to nil breaks the association.</span></span><br><span class="line">            AssociationsHashMap::iterator i = associations.find<span class="params">(disguised_object)</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(i !=  associations.end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = i-&gt;second;</span><br><span class="line">                ObjectAssociationMap::iterator j = refs-&gt;find<span class="params">(key)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(j != refs-&gt;end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                    old_association = j-&gt;second;</span><br><span class="line">                    refs-&gt;erase<span class="params">(j)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// release the old value (outside of the lock).</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(old_association.hasValue<span class="params">()</span>)</span> ReleaseValue<span class="params">()</span><span class="params">(old_association)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到所有的关联对象都由AssociationsManager管理，而AssociationsManager定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AssociationsManager &#123;</span><br><span class="line">    <span class="keyword">static</span> OSSpinLock _lock;</span><br><span class="line">    <span class="keyword">static</span> AssociationsHashMap *_map;               <span class="comment">// associative references:  object pointer -&gt; PtrPtrHashMap.</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AssociationsManager()   &#123; OSSpinLockLock(&amp;_lock); &#125;</span><br><span class="line">    ~AssociationsManager()  &#123; OSSpinLockUnlock(&amp;_lock); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AssociationsHashMap &amp;<span class="title">associations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_map == <span class="literal">NULL</span>)</span><br><span class="line">            _map = <span class="keyword">new</span> AssociationsHashMap();</span><br><span class="line">        <span class="keyword">return</span> *_map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>AssociationsManager里面是由一个静态AssociationsHashMap来存储所有的关联对象的。这相当于把所有对象的关联对象都存在一个全局map里面。而map的的key是这个对象的指针地址（任意两个不同对象的指针地址一定是不同的），而这个map的value又是另外一个AssociationsHashMap，里面保存了关联对象的kv对。<br>而在对象的销毁逻辑里面，见objc-runtime-new.mm:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">*</span>objc_destructInstance<span class="params">(id obj)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(obj)</span> &#123;</span><br><span class="line">        Class isa_gen = _object_getClass<span class="params">(obj)</span>;</span><br><span class="line">        class_t <span class="built_in">*</span>isa = newcls<span class="params">(isa_gen)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read all of the flags at once for performance.</span></span><br><span class="line">        bool cxx = hasCxxStructors<span class="params">(isa)</span>;</span><br><span class="line">        bool assoc = <span class="built_in">!</span>UseGC &amp;&amp; _class_instancesHaveAssociatedObjects<span class="params">(isa_gen)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This order is important.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(cxx)</span> object_cxxDestruct<span class="params">(obj)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(assoc)</span> _object_remove_assocations<span class="params">(obj)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(!UseGC)</span> objc_clear_deallocating<span class="params">(obj)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嗯，runtime的销毁对象函数objc_destructInstance里面会判断这个对象有没有关联对象，如果有，会调用_object_remove_assocations做关联对象的清理工作。</p>
<h2 id="后记">后记</h2><p>正如侯捷先生所讲-“源码面前，了无秘密”，Apple的Cocoa Touch框架虽然并不开源，但是Objective-C的runtime和Core Foundation却是完全开放源码的(在<a href="http://www.opensource.apple.com/tarballs/" target="_blank" rel="external">http://www.opensource.apple.com/tarballs/</a>可以下载到全部的开源代码)。<br>本系列runtime源码学习将会持续更新，意犹未尽的同学可以自行到上述网站下载源码学习。行笔简陋，如有错误，望指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇转载于:<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">美团技术博客</a> </p>
<h2 id="摘要">摘要</h2><p>无论一个类设]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-UI-Tips(-)之UITabelviewCell-Height]]></title>
    <link href="http://yoursite.com/2015/08/18/IOS-UI-Tips-%E4%B9%8BUITabelviewCell-Height/"/>
    <id>http://yoursite.com/2015/08/18/IOS-UI-Tips-之UITabelviewCell-Height/</id>
    <published>2015-08-18T03:36:07.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UITableView中cell高度计算问题之">UITableView中cell高度计算问题之</h2><p>如何解决类似于微博cell高度问题</p>
<h3 id="首先我们先确定一下两个函数问题">首先我们先确定一下两个函数问题</h3><pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath

- <span class="params">(<span class="variable">UITableViewCell</span> *)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>根据我们一开始学习IOS时候的经验，height肯定是在UITableViewCell前面运行的。<br>实际上height虽说是在cell前面运行的，但是，cell运行完了以后，会再一次调用height,这个height才是cell的最终高度。这也就是说在整个tableview的刷新过程中每一个cell对应的height函数会调用2次,一前一后,这也是今天如何解决不规则cell高度的关键。</p>
<h3 id="我们拿到数据源_DataArray_执行_[self-tableView_reloadData]会执行">我们拿到数据源 DataArray 执行 [self.tableView reloadData]会执行</h3><pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>这个会遍历数组中的所有object 这个时候我们就可以在这里计算高度了(label、button、imageview)等,然后保存在mode中<br>等循环结束以后会执行</p>
<pre><code><span class="pp">- <span class="params">(<span class="variable">UITableViewCell</span> *)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>最后再调用</p>
<pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>现实在UITableView上。有些同学会觉得，运行了2次是不是很麻烦,首先呢 ，我想说的是，你知道这个调用顺序以后 可以优化时间 比如第一次计算高度的时候 就可以保存在模型中。后面2次都可以直接拿过来用。<br>其次,对于文字高度比较好计算，但是对于单张图片的高度 ，这个就有点头疼了。曾经我问过一个朋友，他说服务器会直接反悔image的size 好吧 ，这个有这些数据的朋友们，当我没说。<br>其次呢，没有怎么办呢，这个就是2次运行height函数的好处了。</p>
<h3 id="对于第一次函数_我们可以下载图片的缩略图以便在后面的计算高度中可以直接使用">对于第一次函数 我们可以下载图片的缩略图以便在后面的计算高度中可以直接使用</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UITableView中cell高度计算问题之">UITableView中cell高度计算问题之</h2><p>如何解决类似于微博cell高度问题</p>
<h3 id="首先我们先确定一下两个函数问题">首先我们先确定一下两个函数问题</h3><pre><cod]]>
    </summary>
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
</feed>
