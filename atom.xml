<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ivanda的博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-28T02:35:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wangda]]></name>
    <email><![CDATA[11951691@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IOS9系统适配问题]]></title>
    <link href="http://yoursite.com/2015/09/18/IOS9%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/09/18/IOS9适配问题/</id>
    <published>2015-09-18T11:06:03.000Z</published>
    <updated>2015-09-28T02:35:02.000Z</updated>
    <content type="html"><![CDATA[<p><strong>前天苹果发布了ios9的推送 小编第一时间更新了系统和xcode7 现在将遇到的问题总结一下
</strong></p>
<p>##<font color="green">问题1 关于编译报错bitcode</font><br>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
<p>要么让第三方库支持，要么关闭target的bitcode选项。</p>
<p><strong>实际上在Xcode 7中，我们新建一个iOS程序时，bitcode选项默认是设置为YES的。我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到这个设置。</strong></p>
<p>不过，我们现在需要考虑的是三个平台：iOS，Mac OS，watchOS。</p>
<p>对应iOS，bitcode是可选的。<br>对于watchOS，bitcode是必须的。<br>Mac OS不支持bitcode。</p>
<p>解决方法:在设置中关了关闭bitcode即可</p>
<p>##<font color="green">问题2 关于ios应用跳转问题</font><br>ios9 支付宝不能跳转<br><a href="http://dev.umeng.com/social/ios/ios9#2" target="_blank" rel="external">http://dev.umeng.com/social/ios/ios9#2</a><br>友盟已经做了很详细的解释 不多说什么 支付宝对应的是alipay 参照微信的写法即可</p>
<p>##<font color="green">问题3 http请求问题</font><br>app中加上这句话</p>
<pre><code><span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
<span class="tag">&lt;<span class="title">dict</span>&gt;</span>
    <span class="tag">&lt;<span class="title">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="title">key</span>&gt;</span>
    <span class="tag">&lt;<span class="title">true</span>/&gt;</span>
<span class="tag">&lt;/<span class="title">dict</span>&gt;</span>

如果实用的是https 不用关注
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>前天苹果发布了ios9的推送 小编第一时间更新了系统和xcode7 现在将遇到的问题总结一下
</strong></p>
<p>##<font color="green">问题1 关于编译报错bitcode</font><br>You must rebuil]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Andriod]]></title>
    <link href="http://yoursite.com/2015/08/29/%E5%85%B3%E4%BA%8EAndriod/"/>
    <id>http://yoursite.com/2015/08/29/关于Andriod/</id>
    <published>2015-08-29T08:12:20.000Z</published>
    <updated>2015-08-29T08:16:13.000Z</updated>
    <content type="html"><![CDATA[<p>最近这几天在看andriod的视频 ，作为一名ios开发者看andriod也许不是一个明智的选择。但是不知道为什么最近写程序，老是觉得ios是封闭的，写起来很不爽。而且最近也看完了&lt;从0到1&gt;这本书还是有点感触的，作为一个屌丝来说，确实需要做好abz计划，也许andriod是我的b计划，只能对自己说：加油！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近这几天在看andriod的视频 ，作为一名ios开发者看andriod也许不是一个明智的选择。但是不知道为什么最近写程序，老是觉得ios是封闭的，写起来很不爽。而且最近也看完了&lt;从0到1&gt;这本书还是有点感触的，作为一个屌丝来说，确实需要做好abz计划，也许a]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ARC下内存释放]]></title>
    <link href="http://yoursite.com/2015/08/28/ARC%E4%B8%8B%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>http://yoursite.com/2015/08/28/ARC下内存释放/</id>
    <published>2015-08-28T00:40:50.000Z</published>
    <updated>2015-08-28T00:40:50.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-播放在线视频]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-%E6%92%AD%E6%94%BE%E5%9C%A8%E7%BA%BF%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2015/08/24/IOS-播放在线视频/</id>
    <published>2015-08-24T01:13:41.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="第一种：">第一种：</h3><p>//UIWebView 加在网络视频 在线播放  有声音</p>
<p>UIWebView *myWeb = [[UIWebView alloc] initWithFrame:self.view.bounds];</p>
<p>NSURL *url = [NSURLURLWithString:@”<br><a href="http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8" target="_blank" rel="external">http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8</a>“];<br><a href="http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8//这里也可以是" target="_blank" rel="external">http://devimages.apple.com/iphone/samples/bipbop/gear1/prog_index.m3u8//这里也可以是</a> mp4</p>
<p>NSURLRequest *request = [NSURLRequest requestWithURL:url];</p>
<p>[myWeb setDelegate:self];</p>
<p>[myWeb loadRequest:request];</p>
<p>[self.view addSubview:myWeb];</p>
<h3 id="第二种：">第二种：</h3><p>//AVPlayerLayer 播放在线视频  无声音</p>
<p>NSURL *sourceMovieURL = [NSURL URLWithString:@”<a href="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4" target="_blank" rel="external">http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4</a>“];</p>
<p>AVAsset *movieAsset    = [AVURLAsset URLAssetWithURL:sourceMovieURLoptions:nil];</p>
<p>AVPlayerItem *playerItem = [AVPlayerItem playerItemWithAsset:movieAsset];</p>
<p>AVPlayer *player = [AVPlayer playerWithPlayerItem:playerItem];</p>
<p>AVPlayerLayer *playerLayer = [AVPlayerLayer playerLayerWithPlayer:player];</p>
<p>playerLayer.frame = self.view.layer.bounds;</p>
<p>playerLayer.videoGravity = AVLayerVideoGravityResizeAspect;</p>
<p>[self.view.layer addSublayer:playerLayer];</p>
<p>转载请标明出处，黄志勇的个人博客！</p>
<p>[player play];</p>
<h3 id="第三种：">第三种：</h3><p>//MPMoviePlayerController 播放在线视频  无声音</p>
<p>NSURL *videoURL = [NSURLURLWithString:@”<a href="https://s3.amazonaws.com/adplayer/colgate.mp4" target="_blank" rel="external">https://s3.amazonaws.com/adplayer/colgate.mp4</a>“];</p>
<p>MPMoviePlayerViewcontroller *moviePlayerController = [[MPMoviePlayerViewcontroller alloc] initWithContentURL:videoURL];</p>
<p>moviePlayerController.moviePlayer.movieSourceType = MPMovieSourceTypeFile;</p>
<p>moviePlayerController.moviePlayer.shouldAutoplay = YES;</p>
<p>//moviePlayerController.moviePlayer.controlStyle = MPMovieControlStyleNone;</p>
<p>[moviePlayerController.moviePlayer prepareToPlay];</p>
<p>[moviePlayerController.moviePlayer play];</p>
<p>[[NSnotificationCenter defaultCenter]</p>
<p>addObserver: self</p>
<p>selector: @selector(myMovieFinishedCallback:)</p>
<p>name: MPMoviePlayerPlaybackDidFinishnotification</p>
<p>object: moviePlayerController];</p>
<p>[self presentMoviePlayerViewcontrollerAnimated:moviePlayerController];</p>
<h3 id="题记">题记</h3><p>简单的视频在线播放,可以使用第三方框架MWphotoborwser</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="第一种：">第一种：</h3><p>//UIWebView 加在网络视频 在线播放  有声音</p>
<p>UIWebView *myWeb = [[UIWebView alloc] initWithFrame:self.view.bounds];</p>
<p>]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-摇一摇]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-%E6%91%87%E4%B8%80%E6%91%87/"/>
    <id>http://yoursite.com/2015/08/24/IOS-摇一摇/</id>
    <published>2015-08-24T01:06:08.000Z</published>
    <updated>2015-09-28T02:30:50.000Z</updated>
    <content type="html"><![CDATA[<pre><code><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span>

<span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> ()</span>

<span class="keyword">@end</span>

<span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span>

<span class="comment">/**
 *  开始摇晃就会调用
 */</span>
- (<span class="keyword">void</span>)motionBegan:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}
<span class="comment">/**
 *  摇晃结束就会调用
 */</span>
- (<span class="keyword">void</span>)motionEnded:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}
<span class="comment">/**
 *  摇晃被打断就会调用
 */</span>
- (<span class="keyword">void</span>)motionCancelled:(<span class="built_in">UIEventSubtype</span>)motion withEvent:(<span class="built_in">UIEvent</span> *)event
{
     <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __func__);
}

<span class="keyword">@end</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<pre><code><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span>

<span class="class"><span class="keyword">@]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-CoreMotion]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-CoreMotion/"/>
    <id>http://yoursite.com/2015/08/24/IOS-CoreMotion/</id>
    <published>2015-08-24T01:04:52.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreMotion/CoreMotion.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CMMotionManager *mgr;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建coreMotion管理者</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = [[CMMotionManager alloc] init];</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.isAccelerometerAvailable</span>) &#123;</span><br><span class="line">          <span class="comment">// 3.开始采样</span></span><br><span class="line">         [<span class="keyword">self</span><span class="variable">.mgr</span> startAccelerometerUpdates]; <span class="comment">// pull</span></span><br><span class="line">     &#125;<span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span> *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    CMAcceleration acceleration = <span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.accelerometerData</span><span class="variable">.acceleration</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span> , acceleration<span class="variable">.z</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)push</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.创建coreMotion管理者</span></span><br><span class="line">    <span class="comment">//    CMMotionManager *mgr = [[CMMotionManager alloc] init];</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = [[CMMotionManager alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.判断加速计是否可用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.isAccelerometerAvailable</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         isAccelerometerActive 是否正在采集</span><br><span class="line">         accelerometerData 采集到得数据</span><br><span class="line">         startAccelerometerUpdates  pull</span><br><span class="line">         startAccelerometerUpdatesToQueue  push</span><br><span class="line">         stopAccelerometerUpdates 停止采集</span><br><span class="line">         accelerometerUpdateInterval 采样时间</span><br><span class="line">         */</span></span><br><span class="line">        <span class="comment">// 3.设置采样时间</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.mgr</span><span class="variable">.accelerometerUpdateInterval</span> = <span class="number">1</span> / <span class="number">30.0</span>;</span><br><span class="line">        <span class="comment">// 4.开始采样</span></span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.mgr</span> startAccelerometerUpdatesToQueue:[<span class="built_in">NSOperationQueue</span> mainQueue] withHandler:^(CMAccelerometerData *accelerometerData, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">            <span class="comment">// 这个block是采集到数据时就会调用</span></span><br><span class="line">            <span class="keyword">if</span> (error) <span class="keyword">return</span> ;</span><br><span class="line">            CMAcceleration acceleration = accelerometerData<span class="variable">.acceleration</span>;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"x = %f y = %f z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span> , acceleration<span class="variable">.z</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"加速计不可用"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-UIAccelerometer]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS-UIAccelerometer/"/>
    <id>http://yoursite.com/2015/08/24/IOS-UIAccelerometer/</id>
    <published>2015-08-24T01:01:57.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UIView+Extension.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UIAccelerometerDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  小球</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageBall;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  保存速度</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span>  velocity;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.利用单利获取采集对象</span></span><br><span class="line">    <span class="built_in">UIAccelerometer</span> *acc = [<span class="built_in">UIAccelerometer</span> sharedAccelerometer];</span><br><span class="line">    <span class="comment">// 2.设置代理</span></span><br><span class="line">    acc<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">// 3.设置采样时间</span></span><br><span class="line">    acc<span class="variable">.updateInterval</span> = <span class="number">1</span> / <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark -UIAccelerometerDelegate</span></span><br><span class="line"><span class="comment">// 4.实现代理方法</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要采集到数据就会调用(调用频率非常高)</span><br><span class="line"> *</span><br><span class="line"> *  @param accelerometer 触发事件的对象</span><br><span class="line"> *  @param acceleration  获取到得数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)accelerometer:(<span class="built_in">UIAccelerometer</span> *)accelerometer didAccelerate:(<span class="built_in">UIAcceleration</span> *)acceleration</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"x = %f / y = %f / z = %f"</span>, acceleration<span class="variable">.x</span>, acceleration<span class="variable">.y</span>, acceleration<span class="variable">.z</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     速度 = 加速度 * 时间</span><br><span class="line">     V = at;  ==  a * t1 + a * t2 + a * t3 ....;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="comment">// 不能直接修改对象的结构体属性的成员</span></span><br><span class="line"><span class="comment">//    self.velocity.x += acceleration.x;</span></span><br><span class="line">    _velocity<span class="variable">.x</span> += acceleration<span class="variable">.x</span>;</span><br><span class="line">    <span class="comment">// -=的原因是因为获取到得Y轴的加速度和UIKit的坐标系的Y的值是相反的, 而我们将来想让小球往加速度的反方向运动, 所以 -=;</span></span><br><span class="line">    _velocity<span class="variable">.y</span> -= acceleration<span class="variable">.y</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     </span><br><span class="line">    移动的距离 = 速度 * 时间</span><br><span class="line">    S = vt; == v * t1 + v * t2 + v * t3 ....;</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> += _velocity<span class="variable">.x</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> += _velocity<span class="variable">.y</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 边界检测</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 超出了屏幕的左边</span></span><br><span class="line">        _velocity<span class="variable">.x</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 超出屏幕的顶部</span></span><br><span class="line">        _velocity<span class="variable">.y</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.frame</span>) &gt;= <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.height</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.y</span> = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.height</span> - <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.height</span>;</span><br><span class="line">        <span class="comment">// 查出屏幕的底部</span></span><br><span class="line">        _velocity<span class="variable">.y</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectGetMaxX</span>(<span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.frame</span>) &gt;= <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.width</span>) &#123;</span><br><span class="line">        <span class="comment">// 矫正小球当前的位置</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.x</span> = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.width</span> - <span class="keyword">self</span><span class="variable">.imageBall</span><span class="variable">.width</span>;</span><br><span class="line">        <span class="comment">// 查出屏幕的右边</span></span><br><span class="line">        _velocity<span class="variable">.x</span> *= -<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS距离传感器]]></title>
    <link href="http://yoursite.com/2015/08/24/IOS%E8%B7%9D%E7%A6%BB%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    <id>http://yoursite.com/2015/08/24/IOS距离传感器/</id>
    <published>2015-08-24T00:59:42.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.开启距离传感器(注意: 默认情况距离传感器是关闭的)</span></span><br><span class="line"><span class="comment">//    [UIApplication sharedApplication].proximitySensingEnabled = YES;</span></span><br><span class="line">    <span class="comment">// 只要开启之后, 就开始实时监听</span></span><br><span class="line">    [<span class="built_in">UIDevice</span> currentDevice]<span class="variable">.proximityMonitoringEnabled</span> = <span class="literal">YES</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.当监听到有物体靠近设备时系统会发出通知</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(proximityStateDidChange:) name:<span class="built_in">UIDeviceProximityStateDidChangeNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当监听到有物体靠近设备时调用</span></span><br><span class="line">- (<span class="keyword">void</span>)proximityStateDidChange:(<span class="built_in">NSNotification</span> *)note</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%@", note);</span></span><br><span class="line">   <span class="keyword">if</span>( [<span class="built_in">UIDevice</span> currentDevice]<span class="variable">.proximityState</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"有物体靠近"</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"物体离开"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蓝牙设备]]></title>
    <link href="http://yoursite.com/2015/08/24/%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2015/08/24/蓝牙设备/</id>
    <published>2015-08-24T00:53:00.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="蓝牙设备的基本使用代码">蓝牙设备的基本使用代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#include <span class="title">&lt;GameKit/GameKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UINavigationControllerDelegate</span>, <span class="title">UIImagePickerControllerDelegate</span>, <span class="title">GKPeerPickerControllerDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)connect;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  选择图片</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)selectedPhoto;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  发送</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *customIV;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  会话</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GKSession *session;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)connect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建选择其他蓝牙设备的控制器</span></span><br><span class="line">    GKPeerPickerController *peerPk = [[GKPeerPickerController alloc] init];</span><br><span class="line">    <span class="comment">// 2.成为该控制器的代理</span></span><br><span class="line">    peerPk<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="comment">// 3.显示蓝牙控制器</span></span><br><span class="line">    [peerPk show];</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - GKPeerPickerControllerDelegate</span></span><br><span class="line"><span class="comment">// 4.实现dialing方法</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  当蓝牙设备连接成功就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param picker  触发时间的控制器</span><br><span class="line"> *  @param peerID  连接蓝牙设备的ID</span><br><span class="line"> *  @param session 连接蓝牙的会话(可用通讯), 以后只要拿到session就可以传输数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(<span class="built_in">NSString</span> *)peerID toSession:(GKSession *)session</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, peerID);</span><br><span class="line">    <span class="comment">// 1.保存会话</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.session</span> = session;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.设置监听接收传递过来的数据</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     Handler: 谁来处理接收到得数据</span><br><span class="line">     withContext: 传递数据</span><br><span class="line">     */</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> setDataReceiveHandler:<span class="keyword">self</span> withContext:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.关闭显示蓝牙设备控制器</span></span><br><span class="line">    [picker dismiss];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  接收到其它设备传递过来的数据就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param data    传递过来的数据</span><br><span class="line"> *  @param peer    传递数据设备的ID</span><br><span class="line"> *  @param session 会话</span><br><span class="line"> *  @param context 注册监听时传递的数据</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>) receiveData:(<span class="built_in">NSData</span> *)data fromPeer:(<span class="built_in">NSString</span> *)peer inSession: (GKSession *)session context:(<span class="keyword">void</span> *)context</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%s", __func__);</span></span><br><span class="line">    <span class="comment">// 1.将传递过来的数据转换为图片(注意: 因为发送的时图片, 所以才需要转换为图片)</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span> = image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)peerPickerControllerDidCancel:(GKPeerPickerController *)picker</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)send &#123;</span><br><span class="line">    <span class="comment">// 利用session发送图片数据即可</span></span><br><span class="line">    <span class="comment">// 1.取出customImageView上得图片, 转换为二进制</span></span><br><span class="line">    <span class="built_in">UIImage</span> *image =  <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span>;</span><br><span class="line">    <span class="built_in">NSData</span> *data = <span class="built_in">UIImagePNGRepresentation</span>(image);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     GKSendDataReliable, 数据安全的发送模式, 慢</span><br><span class="line">     GKSendDataUnreliable, 数据不安全的发送模式, 快</span><br><span class="line">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     data: 需要发送的数据</span><br><span class="line">     DataReliable: 是否安全的发送数据(发送数据的模式)</span><br><span class="line">     error: 是否监听发送错误</span><br><span class="line">     */</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.session</span> sendDataToAllPeers:data withDataMode:GKSendDataReliable error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)selectedPhoto</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建图片选择控制器</span></span><br><span class="line">    <span class="built_in">UIImagePickerController</span> *imagePk = [[<span class="built_in">UIImagePickerController</span> alloc] init];</span><br><span class="line">    <span class="comment">// 2.判断图库是否可用打开</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 3.设置打开图库的类型</span></span><br><span class="line">        imagePk<span class="variable">.sourceType</span> = <span class="built_in">UIImagePickerControllerSourceTypeSavedPhotosAlbum</span>;</span><br><span class="line">        </span><br><span class="line">        imagePk<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.打开图片选择控制器</span></span><br><span class="line">        [<span class="keyword">self</span> presentViewController:imagePk animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - UIImagePickerControllerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span> *)info</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    NSLog(@"%@", info);</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.customIV</span><span class="variable">.image</span> = info[<span class="built_in">UIImagePickerControllerOriginalImage</span>];</span><br><span class="line">    </span><br><span class="line">    [picker dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>##CoreBluetooth</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">CBCentralManagerDelegate</span>, <span class="title">CBPeripheralDelegate</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  外设</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *peripherals;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  中心管理者</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) CBCentralManager *mgr;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)peripherals</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_peripherals) &#123;</span><br><span class="line">        _peripherals = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _peripherals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建中心设备</span></span><br><span class="line">    CBCentralManager *mgr = [[CBCentralManager alloc] init];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mgr</span> = mgr;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    mgr<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.利用中心设备扫描外部设备</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     如果指定数组代表只扫描指定的设备</span><br><span class="line">     */</span></span><br><span class="line">    [mgr scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#pragma mark - CBCentralManagerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(<span class="built_in">NSDictionary</span> *)advertisementData RSSI:(<span class="built_in">NSNumber</span> *)RSSI</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存扫描到得外部设备</span></span><br><span class="line">    <span class="comment">// 判断如果数组中不包含当前扫描到得外部设置才保存</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span><span class="variable">.peripherals</span> containsObject:peripheral]) &#123;</span><br><span class="line">        </span><br><span class="line">        peripheral<span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.peripherals</span> addObject:peripheral];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  模拟点击, 然后连接所有的外设</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)start</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (CBPeripheral *peripheral <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.peripherals</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         *  连接外设</span><br><span class="line">         */</span></span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.mgr</span> connectPeripheral:peripheral options:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接外设成功调用</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 扫描外设中得服务</span></span><br><span class="line">    [peripheral discoverServices:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  连接外设失败调用</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma makr - CBPeripheralDelegate</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要扫描到服务就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param peripheral 服务所在的外设</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取外设中所有扫描到得服务</span></span><br><span class="line">    <span class="built_in">NSArray</span> *services = peripheral<span class="variable">.services</span>;</span><br><span class="line">    <span class="keyword">for</span> (CBService *service <span class="keyword">in</span> services) &#123;</span><br><span class="line">        <span class="comment">// 拿到需要的服务</span></span><br><span class="line">        <span class="keyword">if</span> ([service<span class="variable">.UUID</span><span class="variable">.UUIDString</span> isEqualToString:<span class="string">@"123"</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从需要的服务中查找需要的特征</span></span><br><span class="line">            <span class="comment">// 从peripheral中得service中扫描特征</span></span><br><span class="line">            [peripheral discoverCharacteristics:<span class="literal">nil</span> forService:service];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  只要扫描到特征就会调用</span><br><span class="line"> *</span><br><span class="line"> *  @param peripheral 特征所属的外设</span><br><span class="line"> *  @param service    特征所属的服务</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(<span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拿到服务中所有的特诊</span></span><br><span class="line">    <span class="built_in">NSArray</span> *characteristics =  service<span class="variable">.characteristics</span>;</span><br><span class="line">    <span class="comment">// 遍历特征, 拿到需要的特征处理</span></span><br><span class="line">    <span class="keyword">for</span> (CBCharacteristic * characteristic <span class="keyword">in</span> characteristics) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([characteristic<span class="variable">.UUID</span><span class="variable">.UUIDString</span> isEqualToString:<span class="string">@"8888"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"设置闹钟"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="蓝牙设备的基本使用代码">蓝牙设备的基本使用代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[改变nstimer的runloopmode]]></title>
    <link href="http://yoursite.com/2015/08/21/%E6%94%B9%E5%8F%98nstimer%E7%9A%84runloopmode/"/>
    <id>http://yoursite.com/2015/08/21/改变nstimer的runloopmode/</id>
    <published>2015-08-21T09:41:03.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSRunLoop</span> *rp  = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">[rp addTimer:<span class="keyword">self</span><span class="variable">.topAdView</span><span class="variable">.timer</span> forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure>
<p>改变nstimer的runloop模式,防止uiscrollow滚动时影响定时器的正常使用</p>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre>]]>
    </summary>
    
      <category term="NSRunLoop" scheme="http://yoursite.com/tags/NSRunLoop/"/>
    
      <category term="NSRunLoop" scheme="http://yoursite.com/categories/NSRunLoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于swift]]></title>
    <link href="http://yoursite.com/2015/08/21/%E5%85%B3%E4%BA%8Eswift/"/>
    <id>http://yoursite.com/2015/08/21/关于swift/</id>
    <published>2015-08-21T02:20:27.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>接触IOS开始已经快三年了,oc也差不多使用两年了,从去年知道apple新推出了swift开始就在想。swift也许就像玩具一样，昙花一现，终不能取代oc20年的拼杀，然而时至今日，却突然觉得，swift已兵临城下，就待和oc一战高下，从2015wwdc大会上swift发出了最后一张战书，今年年底即将开源，2016必将是ios腥风血雨的一年。<br>今天没什么事情打开github的高级搜索，蓦然发现swift已经上类似于afn的项目Alamofire已经有10000的star 最近特喜欢的reactivecocoa 在说明中明确的说出了更多新功能只会在swift中推出。唉！<br>该来的总会来，来吧让这场编程争夺战来的更猛烈些吧，反正我又不乱来，接下来的一个月，要认真学习了，加油！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>接触IOS开始已经快三年了,oc也差不多使用两年了,从去年知道apple新推出了swift开始就在想。swift也许就像玩具一样，昙花一现，终不能取代oc20年的拼杀，然而时至今日，却突然觉得，swift已兵临城下，就待和oc一战高下，从2015wwdc大会上swift发出]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[block写递归]]></title>
    <link href="http://yoursite.com/2015/08/20/block%E5%86%99%E9%80%92%E5%BD%92/"/>
    <id>http://yoursite.com/2015/08/20/block写递归/</id>
    <published>2015-08-20T07:34:42.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">static</span> <span class="built_in">int</span> (^sumBlock)(<span class="built_in">int</span>) = ^ (<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">num</span> + sumBlock(<span class="built_in">num</span> - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注意，要做到自己调用自己，需要能够准确的在内存中找到 block 的函数入口，因此需要使用 static 修饰符号，其他就没啥了</strong></p>
<ul>
<li>每调用一次自己，系统都会开辟一个栈桢记录临时变量和参数</li>
<li>递归次数过多，会出现栈溢出错误</li>
<li>移动开发中不建议使用递归算法，现在主线程栈区只有 512K</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class=]]>
    </summary>
    
      <category term="Block" scheme="http://yoursite.com/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[隐藏UInavigationBar下的黑边]]></title>
    <link href="http://yoursite.com/2015/08/19/%E9%9A%90%E8%97%8FUInavigationBar%E4%B8%8B%E7%9A%84%E9%BB%91%E8%BE%B9/"/>
    <id>http://yoursite.com/2015/08/19/隐藏UInavigationBar下的黑边/</id>
    <published>2015-08-19T08:55:22.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>本文参考<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line" target="_blank" rel="external">StackOverFlow</a></p>
<h3 id="在基类中">在基类中</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> *navigationBar = <span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.navigationBar</span>;</span><br><span class="line"> [navigationBar setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:KTHEME_COLOR size:<span class="built_in">CGSizeMake</span>(SCREEN_WIDTH, <span class="number">1</span>)]</span><br><span class="line">                    forBarPosition:<span class="built_in">UIBarPositionAny</span></span><br><span class="line">                        barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"> [navigationBar setShadowImage:[<span class="built_in">UIImage</span> new]];</span><br></pre></td></tr></table></figure>
<p>imageWithColor 是一个分类在前边文章中出现过</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文参考<a href="http://stackoverflow.com/questions/19226965/how-to-hide-ios7-uinavigationbar-1px-bottom-line" target="_blank" rel="external"]]>
    </summary>
    
      <category term="实用小工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ImageWithColor]]></title>
    <link href="http://yoursite.com/2015/08/19/ImageWithColor/"/>
    <id>http://yoursite.com/2015/08/19/ImageWithColor/</id>
    <published>2015-08-19T08:23:27.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span> (<span class="title">Color</span>)  </span></span><br><span class="line">  </span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">@end</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span> (<span class="title">Color</span>)  </span></span><br><span class="line">  </span><br><span class="line">+ (<span class="built_in">UIImage</span> *)imageWithColor:(<span class="built_in">UIColor</span> *)color size:(<span class="built_in">CGSize</span>)size  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size<span class="variable">.width</span>, size<span class="variable">.height</span>);  </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(rect<span class="variable">.size</span>);  </span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();  </span><br><span class="line">    <span class="built_in">CGContextSetFillColorWithColor</span>(context,color<span class="variable">.CGColor</span>);  </span><br><span class="line">    <span class="built_in">CGContextFillRect</span>(context, rect);  </span><br><span class="line">    <span class="built_in">UIImage</span> *img = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();  </span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> img;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="实用小工具" scheme="http://yoursite.com/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何建立一个简单的图片浏览器]]></title>
    <link href="http://yoursite.com/2015/08/19/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://yoursite.com/2015/08/19/如何建立一个简单的图片浏览器/</id>
    <published>2015-08-19T03:47:44.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>##构建一个简单的photoBorwser</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>##构建一个简单的photoBorwser</p>
]]>
    </summary>
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解Objective-C:Category]]></title>
    <link href="http://yoursite.com/2015/08/18/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Objective-C%EF%BC%9ACategory/"/>
    <id>http://yoursite.com/2015/08/18/深入理解Objective-C：Category/</id>
    <published>2015-08-18T09:31:12.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>本篇转载于:<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">美团技术博客</a> </p>
<h2 id="摘要">摘要</h2><p>无论一个类设计的多么完美，在未来的需求演进中，都有可能会碰到一些无法预测的情况。那怎么扩展已有的类呢？一般而言，继承和组合是不错的选择。但是在Objective-C 2.0中，又提供了category这个语言特性，可以动态地为已有类添加新行为。如今category已经遍布于Objective-C代码的各个角落，从Apple官方的framework到各个开源框架，从功能繁复的大型APP到简单的应用，catagory无处不在。本文对category做了比较全面的整理，希望对读者有所裨益。</p>
<h2 id="简介">简介</h2><p>本文系学习Objective-C的runtime源码时整理所成，主要剖析了category在runtime层的实现原理以及和category相关的方方面面，内容包括：</p>
<ul>
<li>初入宝地-category简介</li>
<li>连类比事-category和extension</li>
<li>挑灯细览-category真面目</li>
<li>追本溯源-category如何加载</li>
<li>旁枝末叶-category和+load方法</li>
<li>触类旁通-category和方法覆盖</li>
<li>更上一层-category和关联对象</li>
</ul>
<h3 id="1、初入宝地-category简介">1、初入宝地-category简介</h3><p>category是Objective-C 2.0之后添加的语言特性，category的主要作用是为已经存在的类添加方法。除此之外，apple还推荐了category的另外两个使用场景1</p>
<ul>
<li>可以把类的实现分开在几个不同的文件里面。这样做有几个显而易见的好处，a)可以减少单个文件的体积 b)可以把不同的功能组织到不同的category里 c)可以由多个开发者共同完成一个类 d)可以按需加载想要的category 等等。</li>
<li><p>声明私有方法<br>不过除了apple推荐的使用场景，广大开发者脑洞大开，还衍生出了category的其他几个使用场景：</p>
</li>
<li><p>模拟多继承</p>
</li>
<li>把framework的私有方法公开</li>
</ul>
<p>Objective-C的这个语言特性对于纯动态语言来说可能不算什么，比如javascript，你可以随时为一个“类”或者对象添加任意方法和实例变量。但是对于不是那么“动态”的语言而言，这确实是一个了不起的特性。</p>
<h3 id="2、连类比事-category和extension">2、连类比事-category和extension</h3><p>extension看起来很像一个匿名的category，但是extension和有名字的category几乎完全是两个东西。 extension在编译期决议，它就是类的一部分，在编译期和头文件里的@interface以及实现文件里的@implement一起形成一个完整的类，它伴随类的产生而产生，亦随之一起消亡。extension一般用来隐藏类的私有信息，你必须有一个类的源码才能为一个类添加extension，所以你无法为系统的类比如NSString添加extension。（详见2）</p>
<p>但是category则完全不一样，它是在运行期决议的。<br>就category和extension的区别来看，我们可以推导出一个明显的事实，extension可以添加实例变量，而category是无法添加实例变量的（因为在运行期，对象的内存布局已经确定，如果添加实例变量就会破坏类的内部布局，这对编译型语言来说是灾难性的）。</p>
<h2 id="3、挑灯细览-category真面目">3、挑灯细览-category真面目</h2><p>我们知道，所有的OC类和对象，在runtime层都是用struct表示的，category也不例外，在runtime层，category用结构体category_t（在objc-runtime-new.h中可以找到此定义），它包含了<br>1)、类的名字（name）<br>2)、类（cls）<br>3)、category中所有给类添加的实例方法的列表（instanceMethods）<br>4)、category中所有添加的类方法的列表（classMethods）<br>5)、category实现的所有协议的列表（protocols）<br>6)、category中添加的所有属性（instanceProperties）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="keyword">category_t</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">classref_t</span> cls;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">method_list_t</span> *instanceMethods;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">method_list_t</span> *classMethods;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">protocol_list_t</span> *protocols;</span><br><span class="line">    <span class="keyword">struct</span> <span class="keyword">property_list_t</span> *instanceProperties;</span><br><span class="line">&#125; <span class="keyword">category_t</span>;</span><br></pre></td></tr></table></figure>
<p>从category的定义也可以看出category的可为（可以添加实例方法，类方法，甚至可以实现协议，添加属性）和不可为（无法添加实例变量）。<br>ok，我们先去写一个category看一下category到底为何物：<br><strong>MyClass.h：
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span>(<span class="title">MyAddition</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>MyClass.m：
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"MyClass"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span>(<span class="title">MyAddition</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)printName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"MyAddition"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>我们使用clang的命令去看看category到底会变成什么：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">clang</span> <span class="tag">-rewrite-objc</span> <span class="tag">MyClass</span><span class="class">.m</span></span><br></pre></td></tr></table></figure>
<p>好吧，我们得到了一个3M大小，10w多行的.cpp文件（这绝对是Apple值得吐槽的一点），我们忽略掉所有和我们无关的东西，在文件的最后，我们找到了如下代码片段：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_method_list_t*/</span> &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _objc_method)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> method_count;</span><br><span class="line"><span class="keyword">struct</span> _objc_method method_list[<span class="number">1</span>];</span><br><span class="line">&#125; _OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line"><span class="keyword">sizeof</span>(_objc_method),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">&#123;&#123;(<span class="keyword">struct</span> objc_selector *)<span class="string">"printName"</span>, <span class="string">"v16@0:8"</span>, (<span class="keyword">void</span> *)_I_MyClass_MyAddition_printName&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="comment">/*_prop_list_t*/</span> &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> entsize;  <span class="comment">// sizeof(struct _prop_t)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count_of_properties;</span><br><span class="line"><span class="keyword">struct</span> <span class="keyword">_prop_t</span> prop_list[<span class="number">1</span>];</span><br><span class="line">&#125; _OBJC_$_PROP_LIST_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) = &#123;</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">_prop_t</span>),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line">&#123;&#123;<span class="string">"name"</span>,<span class="string">"T@\"NSString\",C,N"</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> __declspec(dllexport) <span class="keyword">struct</span> <span class="keyword">_class_t</span> OBJC_CLASS_$_MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_category_t</span> _OBJC_$_CATEGORY_MyClass_$_MyAddition __attribute__ ((used, section (<span class="string">"__DATA,__objc_const"</span>))) =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"MyClass"</span>,</span><br><span class="line"><span class="number">0</span>, <span class="comment">// &amp;OBJC_CLASS_$_MyClass,</span></span><br><span class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> <span class="keyword">_method_list_t</span> *)&amp;_OBJC_$_CATEGORY_INSTANCE_METHODS_MyClass_$_MyAddition,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">(<span class="keyword">const</span> <span class="keyword">struct</span> <span class="keyword">_prop_list_t</span> *)&amp;_OBJC_$_PROP_LIST_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition(<span class="keyword">void</span> ) &#123;</span><br><span class="line">_OBJC_$_CATEGORY_MyClass_$_MyAddition.cls = &amp;OBJC_CLASS_$_MyClass;</span><br><span class="line">&#125;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> section(<span class="string">".objc_inithooks$B"</span>, long, read, write)</span></span><br><span class="line">__declspec(allocate(<span class="string">".objc_inithooks$B"</span>)) <span class="keyword">static</span> <span class="keyword">void</span> *OBJC_CATEGORY_SETUP[] = &#123;</span><br><span class="line">(<span class="keyword">void</span> *)&amp;OBJC_CATEGORY_SETUP_$_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_class_t</span> *L_OBJC_LABEL_CLASS_$ [<span class="number">1</span>] __attribute__((used, section (<span class="string">"__DATA, __objc_classlist,regular,no_dead_strip"</span>)))= &#123;</span><br><span class="line">&amp;OBJC_CLASS_$_MyClass,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_class_t</span> *_OBJC_LABEL_NONLAZY_CLASS_$[] = &#123;</span><br><span class="line">&amp;OBJC_CLASS_$_MyClass,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> <span class="keyword">_category_t</span> *L_OBJC_LABEL_CATEGORY_$ [<span class="number">1</span>] __attribute__((used, section (<span class="string">"__DATA, __objc_catlist,regular,no_dead_strip"</span>)))= &#123;</span><br><span class="line">&amp;_OBJC_$_CATEGORY_MyClass_$_MyAddition,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们可以看到:</p>
<ul>
<li>1)、首先编译器生成了实例方法列表OBJC$CATEGORY_INSTANCE_METHODS_MyClass$MyAddition和属性列表_OBJC$PROP_LIST_MyClass$MyAddition，两者的命名都遵循了公共前缀+类名+category名字的命名方式，而且实例方法列表里面填充的正是我们在MyAddition这个category里面写的方法printName，而属性列表里面填充的也正是我们在MyAddition里添加的name属性。还有一个需要注意到的事实就是category的名字用来给各种列表以及后面的category结构体本身命名，而且有static来修饰，所以在同一个编译单元里我们的category名不能重复，否则会出现编译错误。</li>
<li>2)、其次，编译器生成了category本身_OBJC$CATEGORY_MyClass$MyAddition，并用前面生成的列表来初始化category本身。</li>
<li>3)、最后，编译器在DATA段下的objc_catlist section里保存了一个大小为1的category_t的数组L_OBJC_LABEL<em>CATEGORY$（当然，如果有多个category，会生成对应长度的数组^</em>^），用于运行期category的加载。</li>
</ul>
<p>到这里，编译器的工作就接近尾声了，对于category在运行期怎么加载，我们下节揭晓。</p>
<h2 id="4、追本溯源-category如何加载">4、追本溯源-category如何加载</h2><p>我们知道，Objective-C的运行是依赖OC的runtime的，而OC的runtime和其他系统库一样，是OS X和iOS通过dyld动态加载的。<br>想了解更多dyld地同学可以移步这里<a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html" target="_blank" rel="external">（3）</a>。<br>对于OC运行时，入口方法如下（在objc-os.mm文件中）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _objc_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    lock_init();</span><br><span class="line">    exception_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register for unmap first, in case some +load unmaps something</span></span><br><span class="line">    _dyld_register_func_for_remove_image(&amp;unmap_image);</span><br><span class="line">    dyld_register_image_state_change_handler(dyld_image_state_bound,</span><br><span class="line">                                             <span class="number">1</span><span class="comment">/*batch*/</span>, &amp;map_images);</span><br><span class="line">    dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, <span class="number">0</span><span class="comment">/*not batch*/</span>, &amp;load_images);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>category被附加到类上面是在map_images的时候发生的，在new-ABI的标准下，_objc_init里面的调用的map_images最终会调用objc-runtime-new.mm里面的_read_images方法，而在_read_images方法的结尾，有以下的代码片段：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Discover categories. </span></span><br><span class="line">    <span class="keyword">for</span> <span class="params">(EACH_HEADER)</span> &#123;</span><br><span class="line">        category_t <span class="built_in">*</span><span class="built_in">*</span>catlist =</span><br><span class="line">            _getObjc2CategoryList<span class="params">(hi, &amp;count)</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="params">(i = <span class="number">0</span>; i &lt; count; i++)</span> &#123;</span><br><span class="line">            category_t <span class="built_in">*</span>cat = catlist[i];</span><br><span class="line">            class_t <span class="built_in">*</span>cls = remapClass<span class="params">(cat-&gt;cls)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(!cls)</span> &#123;</span><br><span class="line">                <span class="comment">// Category's target class is missing (probably weak-linked).</span></span><br><span class="line">                <span class="comment">// Disavow any knowledge of this category.</span></span><br><span class="line">                catlist[i] = NULL;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: IGNORING category \?\?\?(%s) %p with "</span></span><br><span class="line">                                 <span class="string">"missing weak-linked target class"</span>,</span><br><span class="line">                                 cat-&gt;name, cat)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process this category. </span></span><br><span class="line">            <span class="comment">// First, register the category with its target class. </span></span><br><span class="line">            <span class="comment">// Then, rebuild the class's method lists (etc) if </span></span><br><span class="line">            <span class="comment">// the class is realized. </span></span><br><span class="line">            BOOL classExists = NO;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(cat-&gt;instanceMethods ||  cat-&gt;protocols </span><br><span class="line">                ||  cat-&gt;instanceProperties)</span></span><br><span class="line">            &#123;</span><br><span class="line">                addUnattachedCategoryForClass<span class="params">(cat, cls, hi)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(isRealized<span class="params">(cls)</span>)</span> &#123;</span><br><span class="line">                    remethodizeClass<span class="params">(cls)</span>;</span><br><span class="line">                    classExists = YES;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: found category -%s(%s) %s"</span>,</span><br><span class="line">                                 getName<span class="params">(cls)</span>, cat-&gt;name,</span><br><span class="line">                                 classExists ? <span class="string">"on existing class"</span> : <span class="string">""</span>)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(cat-&gt;classMethods  ||  cat-&gt;protocols </span><br><span class="line">                /* ||  cat-&gt;classProperties */)</span></span><br><span class="line">            &#123;</span><br><span class="line">                addUnattachedCategoryForClass<span class="params">(cat, cls-&gt;isa, hi)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(isRealized<span class="params">(cls-&gt;isa)</span>)</span> &#123;</span><br><span class="line">                    remethodizeClass<span class="params">(cls-&gt;isa)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">                    _objc_inform<span class="params">(<span class="string">"CLASS: found category +%s(%s)"</span>,</span><br><span class="line">                                 getName<span class="params">(cls)</span>, cat-&gt;name)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们拿到的catlist就是上节中讲到的编译器为我们准备的category_t数组，关于是如何加载catlist本身的，我们暂且不表，这和category本身的关系也不大，有兴趣的同学可以去研究以下Apple的二进制格式和load机制。<br>略去PrintConnecting这个用于log的东西，这段代码很容易理解：<br>1)、把category的实例方法、协议以及属性添加到类上<br>2)、把category的类方法和协议添加到类的metaclass上</p>
<p>值得注意的是，在代码中有一小段注释 / || cat-&gt;classProperties /，看来苹果有过给类添加属性的计划啊。<br>ok，我们接着往里看，category的各种列表是怎么最终添加到类上的，就拿实例方法列表来说吧：<br>在上述的代码片段里，addUnattachedCategoryForClass只是把类和category做一个关联映射，而remethodizeClass才是真正去处理添加事宜的功臣。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">static void remethodizeClass<span class="params">(class_t *cls)</span></span><br><span class="line">&#123;</span><br><span class="line">    category_list <span class="built_in">*</span>cats;</span><br><span class="line">    BOOL isMeta;</span><br><span class="line"></span><br><span class="line">    rwlock_assert_writing<span class="params">(&amp;runtimeLock)</span>;</span><br><span class="line"></span><br><span class="line">    isMeta = isMetaClass<span class="params">(cls)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-methodizing: check for more categories</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(<span class="params">(cats = unattachedCategoriesForClass<span class="params">(cls)</span>)</span>)</span> &#123;</span><br><span class="line">        chained_property_list <span class="built_in">*</span>newproperties;</span><br><span class="line">        const protocol_list_t <span class="built_in">*</span><span class="built_in">*</span>newprotos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(PrintConnecting)</span> &#123;</span><br><span class="line">            _objc_inform<span class="params">(<span class="string">"CLASS: attaching categories to class '%s' %s"</span>,</span><br><span class="line">                         getName<span class="params">(cls)</span>, isMeta ? <span class="string">"(meta)"</span> : <span class="string">""</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update methods, properties, protocols</span></span><br><span class="line"></span><br><span class="line">        BOOL vtableAffected = NO;</span><br><span class="line">        attachCategoryMethods<span class="params">(cls, cats, &amp;vtableAffected)</span>;</span><br><span class="line"></span><br><span class="line">        newproperties = buildPropertyList<span class="params">(NULL, cats, isMeta)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(newproperties)</span> &#123;</span><br><span class="line">            newproperties-&gt;next = cls-&gt;data<span class="params">()</span>-&gt;properties;</span><br><span class="line">            cls-&gt;data<span class="params">()</span>-&gt;properties = newproperties;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newprotos = buildProtocolList<span class="params">(cats, NULL, cls-&gt;data<span class="params">()</span>-&gt;protocols)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(cls-&gt;data<span class="params">()</span>-&gt;protocols  &amp;&amp;  cls-&gt;data<span class="params">()</span>-&gt;protocols != newprotos)</span> &#123;</span><br><span class="line">            _free_internal<span class="params">(cls-&gt;data<span class="params">()</span>-&gt;protocols)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cls-&gt;data<span class="params">()</span>-&gt;protocols = newprotos;</span><br><span class="line"></span><br><span class="line">        _free_internal<span class="params">(cats)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update method caches and vtables</span></span><br><span class="line">        flushCaches<span class="params">(cls)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(vtableAffected)</span> flushVtables<span class="params">(cls)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而对于添加类的实例方法而言，又会去调用attachCategoryMethods这个方法，我们去看下attachCategoryMethods：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> </span><br><span class="line"><span class="title">attachCategoryMethods</span><span class="params">(class_t *cls, category_list *cats,</span><br><span class="line">                      BOOL *inoutVtablesAffected)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cats) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (PrintReplacedMethods) printReplacements(cls, cats);</span><br><span class="line"></span><br><span class="line">    BOOL isMeta = isMetaClass(cls);</span><br><span class="line">    <span class="keyword">method_list_t</span> **mlists = (<span class="keyword">method_list_t</span> **)</span><br><span class="line">        _malloc_internal(cats-&gt;<span class="function">count * <span class="title">sizeof</span><span class="params">(*mlists)</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Count backwards through cats to get newest categories first</span></span><br><span class="line">    <span class="keyword">int</span> mcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = cats-&gt;count;</span><br><span class="line">    BOOL fromBundle = NO;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="keyword">method_list_t</span> *mlist = cat_method_list(cats-&gt;<span class="built_in">list</span>[i].cat, isMeta);</span><br><span class="line">        <span class="keyword">if</span> (mlist) &#123;</span><br><span class="line">            mlists[mcount++] = mlist;</span><br><span class="line">            fromBundle |= cats-&gt;<span class="built_in">list</span>[i].fromBundle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attachMethodLists(cls, mlists, mcount, NO, fromBundle, inoutVtablesAffected);</span><br><span class="line"></span><br><span class="line">    _free_internal(mlists);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attachCategoryMethods做的工作相对比较简单，它只是把所有category的实例方法列表拼成了一个大的实例方法列表，然后转交给了attachMethodLists方法（我发誓，这是本节我们看的最后一段代码了^_^），这个方法有点长，我们只看一小段：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (uint32_t m = <span class="number">0</span>;</span><br><span class="line">             (scanForCustomRR || scanForCustomAWZ)  &amp;&amp;  m &lt; mlist-&gt;count;</span><br><span class="line">             m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">SEL</span> sel = method_list_nth(mlist, m)-&gt;name;</span><br><span class="line">            <span class="keyword">if</span> (scanForCustomRR  &amp;&amp;  isRRSelector(sel)) &#123;</span><br><span class="line">                cls-&gt;setHasCustomRR();</span><br><span class="line">                scanForCustomRR = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scanForCustomAWZ  &amp;&amp;  isAWZSelector(sel)) &#123;</span><br><span class="line">                cls-&gt;setHasCustomAWZ();</span><br><span class="line">                scanForCustomAWZ = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // <span class="type">Fill</span> <span class="keyword">method</span> list <span class="type">array</span></span><br><span class="line">        newLists[newCount++] = mlist;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    // <span class="type">Copy</span> old methods to the <span class="keyword">method</span> list <span class="type">array</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; oldCount; i++) &#123;</span><br><span class="line">        newLists[newCount++] = oldLists[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的有两点：<br>1)、category的方法没有“完全替换掉”原来类已经有的方法，也就是说如果category和原来类都有methodA，那么category附加完成之后，类的方法列表里会有两个methodA<br>2)、category的方法被放到了新方法列表的前面，而原来类的方法被放到了新方法列表的后面，这也就是我们平常所说的category的方法会“覆盖”掉原来类的同名方法，这是因为运行时在查找方法的时候是顺着方法列表的顺序查找的，它只要一找到对应名字的方法，就会罢休^_^，殊不知后面可能还有一样名字的方法。</p>
<h3 id="5、旁枝末叶-category和+load方法">5、旁枝末叶-category和+load方法</h3><p>我们知道，在类和category中都可以有+load方法，那么有两个问题：<br>1)、在类的+load方法调用的时候，我们可以调用category中声明的方法么？<br>2)、这么些个+load方法，调用顺序是咋样的呢？<br>鉴于上述几节我们看的代码太多了，对于这两个问题我们先来看一点直观的：<br><img src="http://tech.meituan.com/img/diveintocategory/project.png" alt="image"><br>我们的代码里有MyClass和MyClass的两个category （Category1和Category2），MyClass和两个category都添加了+load方法，并且Category1和Category2都写了MyClass的printName方法。<br>在Xcode中点击Edit Scheme，添加如下两个环境变量（可以在执行load方法以及加载category的时候打印log信息，更多的环境变量选项可参见objc-private.h）:<br><img src="http://tech.meituan.com/img/diveintocategory/environment_vars.png" alt="image"><br>运行项目，我们会看到控制台打印很多东西出来，我们只找到我们想要的信息，顺序如下：</p>
<p>objc[1187]: REPLACED: -[MyClass printName] by category Category1<br>objc[1187]: REPLACED: -[MyClass printName] by category Category2<br>.<br>.<br>.<br>objc[1187]: LOAD: class ‘MyClass’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category1)’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category2)’ scheduled for +load<br>objc[1187]: LOAD: +[MyClass load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category1) load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category2) load]</p>
<p>所以，对于上面两个问题，答案是很明显的：<br>1)、可以调用，因为附加category到类的工作会先于+load方法的执行<br>2)、+load的执行顺序是先类，后category，而category的+load执行顺序是根据编译顺序决定的。<br>目前的编译顺序是这样的：<br><img src="http://tech.meituan.com/img/diveintocategory/compile1.png" alt="image"><br>我们调整一个Category1和Category2的编译顺序，run。ok，我们可以看到控制台的输出顺序变了：<br><img src="http://tech.meituan.com/img/diveintocategory/compile2.png" alt="image"><br>objc[1187]: REPLACED: -[MyClass printName] by category Category2<br>objc[1187]: REPLACED: -[MyClass printName] by category Category1<br>.<br>.<br>.<br>objc[1187]: LOAD: class ‘MyClass’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category2)’ scheduled for +load<br>objc[1187]: LOAD: category ‘MyClass(Category1)’ scheduled for +load<br>objc[1187]: LOAD: +[MyClass load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category2) load]<br>.<br>.<br>.<br>objc[1187]: LOAD: +[MyClass(Category1) load]</p>
<p>虽然对于+load的执行顺序是这样，但是对于“覆盖”掉的方法，则会先找到最后一个编译的category里的对应方法。<br>这一节我们只是用很直观的方式得到了问题的答案，有兴趣的同学可以继续去研究一下OC的运行时代码。</p>
<h2 id="6、触类旁通-category和方法覆盖">6、触类旁通-category和方法覆盖</h2><p>鉴于上面几节我们已经把原理都讲了，这一节只有一个问题:<br>怎么调用到原来类中被category覆盖掉的方法？<br>对于这个问题，我们已经知道category其实并不是完全替换掉原来类的同名方法，只是category在方法列表的前面而已，所以我们只要顺着方法列表找到最后一个对应名字的方法，就可以调用原来类的方法：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> currentClass = [<span class="type">MyClass</span> class];</span><br><span class="line"><span class="type">MyClass</span> *my = [[<span class="type">MyClass</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentClass) &#123;</span><br><span class="line">    unsigned <span class="type">int</span> methodCount;</span><br><span class="line">    <span class="type">Method</span> *methodList = class_copyMethodList(currentClass, &amp;methodCount);</span><br><span class="line">    <span class="type">IMP</span> lastImp = <span class="type">NULL</span>;</span><br><span class="line">    <span class="type">SEL</span> lastSel = <span class="type">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSInteger</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="keyword">method</span> = methodList[i];</span><br><span class="line">        <span class="type">NSString</span> *methodName = [<span class="type">NSString</span> stringWithCString:sel_getName(method_getName(<span class="keyword">method</span>)) </span><br><span class="line">                                        encoding:<span class="type">NSUTF8StringEncoding</span>];</span><br><span class="line">        <span class="keyword">if</span> ([@<span class="string">"printName"</span> isEqualToString:methodName]) &#123;</span><br><span class="line">            lastImp = method_getImplementation(<span class="keyword">method</span>);</span><br><span class="line">            lastSel = method_getName(<span class="keyword">method</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    typedef <span class="type">void</span> (*fn)(id,<span class="type">SEL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastImp != <span class="type">NULL</span>) &#123;</span><br><span class="line">        fn f = (fn)lastImp;</span><br><span class="line">        f(my,lastSel);</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7、更上一层-category和关联对象">7、更上一层-category和关联对象</h2><p>如上所见，我们知道在category里面是无法为category添加实例变量的。但是我们很多时候需要在category中添加和对象关联的值，这个时候可以求助关联对象来实现。<br><strong>MyClass+Category1.h:
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> (<span class="title">Category1</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>MyClass+Category1.m:
</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass+Category1.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span> (<span class="title">Category1</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="string">@"load in Category1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</span><br><span class="line">&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</span><br><span class="line">                             <span class="string">"name"</span>,</span><br><span class="line">                             name,</span><br><span class="line">                             OBJC_ASSO<span class="built_in">CIATION_COPY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)name</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *nameObject = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">return</span> nameObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>但是关联对象又是存在什么地方呢？ 如何存储？ 对象销毁时候如何处理关联对象呢？<br>我们去翻一下runtime的源码，在objc-references.mm文件中有个方法_object_set_associative_reference：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">void _object_set_associative_reference<span class="params">(id object, void *key, id value, uintptr_t policy)</span> &#123;</span><br><span class="line">    <span class="comment">// retain the new value (if any) outside the lock.</span></span><br><span class="line">    ObjcAssociation old_association<span class="params">(<span class="number">0</span>, nil)</span>;</span><br><span class="line">    id new_value = value ? acquireValue<span class="params">(value, policy)</span> : nil;</span><br><span class="line">    &#123;</span><br><span class="line">        AssociationsManager manager;</span><br><span class="line">        AssociationsHashMap &amp;associations<span class="params">(manager.associations<span class="params">()</span>)</span>;</span><br><span class="line">        disguised_ptr_t disguised_object = DISGUISE<span class="params">(object)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(new_value)</span> &#123;</span><br><span class="line">            <span class="comment">// break any existing association.</span></span><br><span class="line">            AssociationsHashMap::iterator i = associations.find<span class="params">(disguised_object)</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(i != associations.end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// secondary table exists</span></span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = i-&gt;second;</span><br><span class="line">                ObjectAssociationMap::iterator j = refs-&gt;find<span class="params">(key)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(j != refs-&gt;end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                    old_association = j-&gt;second;</span><br><span class="line">                    j-&gt;second = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="params">(*refs)</span>[key] = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// create the new association (first time).</span></span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = new ObjectAssociationMap;</span><br><span class="line">                associations[disguised_object] = refs;</span><br><span class="line">                <span class="params">(*refs)</span>[key] = ObjcAssociation<span class="params">(policy, new_value)</span>;</span><br><span class="line">                _class_setInstancesHaveAssociatedObjects<span class="params">(_object_getClass<span class="params">(object)</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// setting the association to nil breaks the association.</span></span><br><span class="line">            AssociationsHashMap::iterator i = associations.find<span class="params">(disguised_object)</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(i !=  associations.end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                ObjectAssociationMap <span class="built_in">*</span>refs = i-&gt;second;</span><br><span class="line">                ObjectAssociationMap::iterator j = refs-&gt;find<span class="params">(key)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(j != refs-&gt;end<span class="params">()</span>)</span> &#123;</span><br><span class="line">                    old_association = j-&gt;second;</span><br><span class="line">                    refs-&gt;erase<span class="params">(j)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// release the old value (outside of the lock).</span></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(old_association.hasValue<span class="params">()</span>)</span> ReleaseValue<span class="params">()</span><span class="params">(old_association)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到所有的关联对象都由AssociationsManager管理，而AssociationsManager定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AssociationsManager &#123;</span><br><span class="line">    <span class="keyword">static</span> OSSpinLock _lock;</span><br><span class="line">    <span class="keyword">static</span> AssociationsHashMap *_map;               <span class="comment">// associative references:  object pointer -&gt; PtrPtrHashMap.</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AssociationsManager()   &#123; OSSpinLockLock(&amp;_lock); &#125;</span><br><span class="line">    ~AssociationsManager()  &#123; OSSpinLockUnlock(&amp;_lock); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AssociationsHashMap &amp;<span class="title">associations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_map == <span class="literal">NULL</span>)</span><br><span class="line">            _map = <span class="keyword">new</span> AssociationsHashMap();</span><br><span class="line">        <span class="keyword">return</span> *_map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>AssociationsManager里面是由一个静态AssociationsHashMap来存储所有的关联对象的。这相当于把所有对象的关联对象都存在一个全局map里面。而map的的key是这个对象的指针地址（任意两个不同对象的指针地址一定是不同的），而这个map的value又是另外一个AssociationsHashMap，里面保存了关联对象的kv对。<br>而在对象的销毁逻辑里面，见objc-runtime-new.mm:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void <span class="built_in">*</span>objc_destructInstance<span class="params">(id obj)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(obj)</span> &#123;</span><br><span class="line">        Class isa_gen = _object_getClass<span class="params">(obj)</span>;</span><br><span class="line">        class_t <span class="built_in">*</span>isa = newcls<span class="params">(isa_gen)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read all of the flags at once for performance.</span></span><br><span class="line">        bool cxx = hasCxxStructors<span class="params">(isa)</span>;</span><br><span class="line">        bool assoc = <span class="built_in">!</span>UseGC &amp;&amp; _class_instancesHaveAssociatedObjects<span class="params">(isa_gen)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This order is important.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(cxx)</span> object_cxxDestruct<span class="params">(obj)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(assoc)</span> _object_remove_assocations<span class="params">(obj)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="params">(!UseGC)</span> objc_clear_deallocating<span class="params">(obj)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嗯，runtime的销毁对象函数objc_destructInstance里面会判断这个对象有没有关联对象，如果有，会调用_object_remove_assocations做关联对象的清理工作。</p>
<h2 id="后记">后记</h2><p>正如侯捷先生所讲-“源码面前，了无秘密”，Apple的Cocoa Touch框架虽然并不开源，但是Objective-C的runtime和Core Foundation却是完全开放源码的(在<a href="http://www.opensource.apple.com/tarballs/" target="_blank" rel="external">http://www.opensource.apple.com/tarballs/</a>可以下载到全部的开源代码)。<br>本系列runtime源码学习将会持续更新，意犹未尽的同学可以自行到上述网站下载源码学习。行笔简陋，如有错误，望指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇转载于:<a href="http://tech.meituan.com/DiveIntoCategory.html" target="_blank" rel="external">美团技术博客</a> </p>
<h2 id="摘要">摘要</h2><p>无论一个类设]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS-UI-Tips(-)之UITabelviewCell-Height]]></title>
    <link href="http://yoursite.com/2015/08/18/IOS-UI-Tips-%E4%B9%8BUITabelviewCell-Height/"/>
    <id>http://yoursite.com/2015/08/18/IOS-UI-Tips-之UITabelviewCell-Height/</id>
    <published>2015-08-18T03:36:07.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UITableView中cell高度计算问题之">UITableView中cell高度计算问题之</h2><p>如何解决类似于微博cell高度问题</p>
<h3 id="首先我们先确定一下两个函数问题">首先我们先确定一下两个函数问题</h3><pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath

- <span class="params">(<span class="variable">UITableViewCell</span> *)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>根据我们一开始学习IOS时候的经验，height肯定是在UITableViewCell前面运行的。<br>实际上height虽说是在cell前面运行的，但是，cell运行完了以后，会再一次调用height,这个height才是cell的最终高度。这也就是说在整个tableview的刷新过程中每一个cell对应的height函数会调用2次,一前一后,这也是今天如何解决不规则cell高度的关键。</p>
<h3 id="我们拿到数据源_DataArray_执行_[self-tableView_reloadData]会执行">我们拿到数据源 DataArray 执行 [self.tableView reloadData]会执行</h3><pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>这个会遍历数组中的所有object 这个时候我们就可以在这里计算高度了(label、button、imageview)等,然后保存在mode中<br>等循环结束以后会执行</p>
<pre><code><span class="pp">- <span class="params">(<span class="variable">UITableViewCell</span> *)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView cellForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>最后再调用</p>
<pre><code><span class="pp">- <span class="params">(<span class="variable">CGFloat</span>)</span>tableView:<span class="params">(<span class="variable">UITableView</span> *)</span>tableView heightForRowAtIndexPath:<span class="params">(<span class="variable">NSIndexPath</span> *)</span>indexPath</span>
</code></pre><p>现实在UITableView上。有些同学会觉得，运行了2次是不是很麻烦,首先呢 ，我想说的是，你知道这个调用顺序以后 可以优化时间 比如第一次计算高度的时候 就可以保存在模型中。后面2次都可以直接拿过来用。<br>其次,对于文字高度比较好计算，但是对于单张图片的高度 ，这个就有点头疼了。曾经我问过一个朋友，他说服务器会直接反悔image的size 好吧 ，这个有这些数据的朋友们，当我没说。<br>其次呢，没有怎么办呢，这个就是2次运行height函数的好处了。</p>
<h3 id="对于第一次函数_我们可以下载图片的缩略图以便在后面的计算高度中可以直接使用">对于第一次函数 我们可以下载图片的缩略图以便在后面的计算高度中可以直接使用</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UITableView中cell高度计算问题之">UITableView中cell高度计算问题之</h2><p>如何解决类似于微博cell高度问题</p>
<h3 id="首先我们先确定一下两个函数问题">首先我们先确定一下两个函数问题</h3><pre><cod]]>
    </summary>
    
      <category term="UI" scheme="http://yoursite.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C内存布局(转)]]></title>
    <link href="http://yoursite.com/2015/08/17/Objective-C%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2015/08/17/Objective-C内存布局/</id>
    <published>2015-08-17T10:06:49.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>对象(object)即一块内存，本文要探讨的是一个Objective-C对象在内存的布局(layout)问题，水果的官方文档有说，一个类(class)如果不需要从NSObject继承其某些特定的行为是不用继承NSObject的，这里我将讨论限制在继承了NSObject的类的对象范围内。</p>
<h3 id="首先来看一下，NSObject的定义：">首先来看一下，NSObject的定义：</h3><pre><code>@<span class="class"><span class="keyword">interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt; {    </span>
     <span class="class"><span class="keyword">Class</span>    <span class="title">isa</span>;                      </span>
 } 
</code></pre><p>(由于我们讨论的是内存布局，因此将其方法的定义撇开)</p>
<p>在Objective-C中，@interface关键字可以看着是C语言中的struct关键字的别名，当然他还会有一些其它功能，比如说让编译器知道@interface后后面的是一个Objective-C的类的名字等。但就我们研究其内存布局来说，我们简单地将其替换为struct，并将protocal定义去掉。因此，NSObject的定义就是样：</p>
<pre><code><span class="class"><span class="keyword">struct</span> <span class="title">NSObject</span></span>{
    Class isa;
}
</code></pre><p> 那个这个Class又是什么呢？在objc.h中我们发现其仅仅是一个结构(struct)指针的typedef定义:</p>
<pre><code>typedefstruct objc_class *<span class="class"><span class="keyword">Class</span>;</span>
</code></pre><p> 因此，NSObject的定义就像这个样子：</p>
<pre><code><span class="class"><span class="keyword">struct</span> <span class="title">NSObject</span></span>{
    objc_class *isa
}
</code></pre><p>isa就是“isa”，对于所有继承了NSObject的类其对象也都有一个isa指针。这个isa指针指向的东西(先这样称呼它吧)就是关于这个对象所属的类的定义。</p>
<p>　　刨根问底是我们程序员的天性：那object_class的定义是什么呢？由于水果公司现在将这个定义隐藏起来了，不过我依然有办法，用XCode随便建一个工程，在某个变量定义处打个debug断点，然后通过XCode的GUI或者用gdb的p命令查看其结构，这里我使用gdb打印一个UINavigationController变量，我们看到只是一个指针而已：</p>
<pre><code>(gdb) p dialUNC
<span class="variable">$1</span> = (UINavigationController *) <span class="number">0x8e8be80</span>
</code></pre><p>对指针解引用再打印，我们发现里面有很多很多东西，大致如下(由于gdb打印出来内容太多，省略号表示省略了一些内容)：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p *dialUNC</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  &lt;UIViewController&gt; = &#123;</span><br><span class="line">    &lt;UIResponder&gt; = &#123;</span><br><span class="line">      &lt;NSObject&gt; = &#123;</span><br><span class="line">        isa = <span class="number">0x1bebc1c</span></span><br><span class="line">      &#125;, &lt;No data fields&gt;&#125;, </span><br><span class="line">members of UIViewController: </span><br><span class="line">    _view = <span class="number">0xd5dab60</span>, </span><br><span class="line">    _tabBarItem = <span class="number">0x0</span>, </span><br><span class="line">    _navigationItem = <span class="number">0x0</span>, </span><br><span class="line">    _toolbarItems = <span class="number">0x0</span>, </span><br><span class="line">    _title = <span class="number">0x0</span>, </span><br><span class="line">    _nibName = <span class="number">0x0</span>, </span><br><span class="line">    ......(此处省略若干成员，课蜜黄蜂注)</span><br><span class="line">  &#125;, </span><br><span class="line">members of UINavigationController: </span><br><span class="line">  _containerView = <span class="number">0xd5dab60</span>, </span><br><span class="line">  _navigationBar = <span class="number">0xd5dad40</span>, </span><br><span class="line">  _navigationBarClass = <span class="number">0x1beb4d8</span>, </span><br><span class="line">  _toolbar = <span class="number">0x0</span>, </span><br><span class="line">  _navigationTransitionView = <span class="number">0xd5d2f10</span>, </span><br><span class="line">  _currentScrollContentInsetDelta = &#123;</span><br><span class="line">    top = <span class="number">0</span>, </span><br><span class="line">    left = <span class="number">0</span>, </span><br><span class="line">    bottom = <span class="number">0</span>, </span><br><span class="line">    right = <span class="number">0</span></span><br><span class="line">  &#125;, </span><br><span class="line">  _previousScrollContentInsetDelta = &#123;</span><br><span class="line">    top = <span class="number">0</span>, </span><br><span class="line">    left = <span class="number">0</span>, </span><br><span class="line">    bottom = <span class="number">0</span>, </span><br><span class="line">    right = <span class="number">0</span></span><br><span class="line">  &#125;, </span><br><span class="line">  ......（此处省略若干成员，课蜜黄蜂注） </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意gdb打印结果中的黑体字，从中我们可以看到，UINavigationController内存中先是存放了父类的实例变量再存放子类的实例变量。最前面的那个isa指针就是在NSObject中所定义的。由于Objective-C中没有多继承，因此其内存布局还是很简单的，就是：最前面有个isa指针，然后父类的实例变量存放在子类的成员变量之前，so easy!!!但还有一个问题，我们很好奇，这个isa是什么呢？对它解引用再打印内容大致如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p *dialUNC-&gt;isa</span><br><span class="line">$<span class="number">2</span> = &#123;</span><br><span class="line">    isa = <span class="number">0x1bebc30</span>, </span><br><span class="line">    super_class = <span class="number">0x1bebba4</span>, </span><br><span class="line">    name = <span class="number">0xd5dd8d0</span> <span class="string">"?"</span>, </span><br><span class="line">    version = <span class="number">45024840</span>, </span><br><span class="line">    info = <span class="number">223886032</span>, </span><br><span class="line">    instance_size = <span class="number">43102048</span>, </span><br><span class="line">    ivars = <span class="number">0x1bebb7c</span>, </span><br><span class="line">    methodLists = <span class="number">0xd5dab10</span>, </span><br><span class="line">    cache = <span class="number">0x2af0648</span>, </span><br><span class="line">    protocols = <span class="number">0xd584050</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是一个Class或者说objc_class结构在内存中的样子。其实在Objective-C2.0之前这个结构的定义是暴露给用户的，但在Objective-C2.0中，水果公司将它隐藏起来了。经过在网上的查找，发现在Objective-C2.0之前其定义大致如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">struct</span> objc_class &#123;</span><br><span class="line">    <span class="title">Class</span> isa;</span><br><span class="line">    </span><br><span class="line">    <span class="title">Class</span> super_class;</span><br><span class="line">    </span><br><span class="line">    <span class="title">const</span> char *name;</span><br><span class="line">    </span><br><span class="line">    <span class="title">long</span> version;</span><br><span class="line">    <span class="title">long</span> <span class="built_in">info</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title">long</span> instance_size;</span><br><span class="line">    <span class="title">struct</span> objc_ivar_list *ivars;</span><br><span class="line">    <span class="title">struct</span> objc_method_list **methodLists; </span><br><span class="line">    </span><br><span class="line">    <span class="title">struct</span> objc_cache *cache;</span><br><span class="line">    <span class="title">struct</span> objc_protocol_list *protocols;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此简单地说，一个objc_class对象包括一个类的：父类定义(super_class), 变量列表，方法列表，还有实现了哪些协议(Protocal)等等。</p>
<p>　　“等一下”，有人要喊了，”我们刚才在说一个对象里面有一个isa指针，这个指针的定义是objc_class,肿么这个objc-class中还有一个isa？”</p>
<p>　　在这里有必要跟大家啰嗦一大段文字了：在Objective-C中任何的类定义都是对象。即在程序启动的时候任何类定义都对应于一块内存。在编译的时候，编译器会给每一个类生成一个且只生成一个”描述其定义的对象”,也就是水果公司说的类对象(class object),他是一个单例(singleton), 而我们在C++等语言中所谓的对象，叫做实例对象(instance object)。对于实例对象我们不难理解，但类对象(class object)是干什么吃的呢？我们知道Objective-C是门很动态的语言，因此程序里的所有实例对象(instace objec)都是在运行时由Objective-C的运行时库生成的，而这个类对象(class object)就是运行时库用来创建实例对象(instance object)的依据。</p>
<p>　　让我们来理一下，到目前为止，我们知道了：任何直接或间接继承了NSObject的类，它的实例对象(instacne objec)中都有一个isa指针，指向它的类对象(class object)。这个类对象(class object)中存储了关于这个实例对象(instace object)所属的类的定义的一切：包括变量，方法，遵守的协议等等。</p>
<p>　　再回到之前的问题，肿么这个实例对象(instance object)的isa指针指向的类对象(class object)里面还有一个isa呢？</p>
<p>　　这个类对象(class objec)的isa指向的依然是一个objc-class，它就是“元类对象”(metaclass object)，它和类对象(class object)的关系是这样的:  类对象(class object)中包含了类的实例变量，实例方法的定义，而元类对象(metaclass object)中包括了类的类方法(也就是C++中的静态方法)的定义。类对象和元类对象中水果公司当然还会包含一些其它的东西，以后也可能添加其它的内容，但对于我们了解其内存布局来说，只需要记住：类对象存的是关于实例对象的信息(变量，实例方法等)，而元类对象(metaclass object)中存储的是关于类的信息(类的版本，名字，类方法等)。要注意的是，类对象(class object)和元类对象(metaclass object)的定义都是objc_class结构，其不同仅仅是在用途上，比如其中的方法列表在类对象(instance object)中保存的是实例方法(instance method)，而在元类对象(metaclass object)中则保存的是类方法(class method)。关于元类对象水果官方文档” The Objective-‐C Programming Language “P29页顶部描述如下：</p>
<p>　　Note: The compiler also builds a metaclass object for each class. It describes the class object just as the class object describes instances of the class. But while you can send messages to instances and to the class object, the metaclass object is used only internally by the runtime system. </p>
<p>　　这一大段文字好像有点绕，那我们来看一个例子。下面我以一个有4层继承关系的类的实例变量的内存布局为例。　继承关系如下：<br>　　<br>    <img src="https://app.yinxiang.com/shard/s39/res/c2c0004f-7702-4978-b2d2-c41482f75344.jpg?resizeSmall&amp;width=846" alt="id"><br>　　<br>　　通过打印D3类的一个实例变量并将那些isa,super_class的地地址记录下来整理得到的关系如下图:</p>
<p><img src="https://app.yinxiang.com/shard/s39/res/2eaaccde-e5d6-4635-a3c5-982bfaaa0892.png?resizeSmall&amp;width=846" alt="id"></p>
<p>在这里对上图进行一下解释： 矩形表示对象(object),即一块内存;箭头表示指针，isa即isa指针，super表示super_class指针，这些指针是箭头尾部对象(object)的成员变量，除了“D3实例对象”(最左边的对象)，其它对象都是在程序一启动就创建在在内存中的了而且都是单例(singleton)，类对象(class object)和元类对象(metaclass object)只是用途不一样，其定义都为objc_class结构</p>
<p>　　D3对象的内存布局为:从前往后为isa,D1的实例变量,D2的实例变量,D3的实例变量。而isa指针指向的内容就是上图中的“D3类对象”。对于上图，任何类C如果直接或间接继承NSObject 或者其就是NSObject,则有如下结论：</p>
<p>　　<strong>1. 类C的类对象(class object)的super_class都指向了类C父类的类对象(class object), NSObject的类对像的super_class指向0x0</strong></p>
<p><strong>　　2. 类C的类对象(class object)的isa指针都指向他的元类对象(metaclass object)
</strong></p>
<p><strong>　　3. 类C的元类对象(metaclass object)的super_class指针指向父类的元类对象(metaclass object), 例外：NSObject的元类对象(metaclass object)的super_class指向NSObject的类对象(class object).
</strong></p>
<p><strong>　　4. 类C的元类对象(metaclass object)的isa指针指都指向NSObject的元类对象(metaclass object)
</strong><br>　　NSObject的实例对象(虽然它没有实例变量和实例方法但这个对象仍然存在)其super_class指向地址0x0，因为NSObject没有父类, 这满足上面的结论1。　<br>　　NSObject的实例对象的isa指向了NSObject的元类对象(metaclass object)，这满足上面结论2。　　<br>　　NSObject的元类对象(metaclass object)指向了自己，这也满足上面结论4。　　<br>　　但NSObject的元类对象(metaclass object)的super_class指向了NSObject的类对象(class object)，我没有看出什么规律可言或者苹果为什么要这样做，我只能说“Apple just do this, I don’t know why”（如果有人知道，麻烦告诉我一下，多谢）。我认为水果的工程师们只是简单地又将它指向NSObject的类对象(class object)，其实我认为这个super_class指针赋0x0也未尝不可(这样就满足上面的结论3， 因为NSObject没有父类，所以它的metaclass object的super_class指向0x0，我觉得这样更统一。当然只是我的yy罢了)。 </p>
<p><code>原文地址:http://www.cnblogs.com/csutanyu/archive/2011/12/12/Objective-C_memor_layout.html</code></p>
<p>　　</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对象(object)即一块内存，本文要探讨的是一个Objective-C对象在内存的布局(layout)问题，水果的官方文档有说，一个类(class)如果不需要从NSObject继承其某些特定的行为是不用继承NSObject的，这里我将讨论限制在继承了NSObject的类的]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C消息机制的原理]]></title>
    <link href="http://yoursite.com/2015/08/17/Objective-C%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2015/08/17/Objective-C消息机制的原理/</id>
    <published>2015-08-17T00:55:11.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<h3 id="在Objective-C中，message与方法的真正实现是在执行阶段绑定的，而非编译阶段。">在Objective-C中，message与方法的真正实现是在执行阶段绑定的，而非编译阶段。</h3><ul>
<li>编译器会将消息发送转换成对objc_msgSend方法的调用。</li>
<li>objc_msgSend方法含两个必要参数：receiver、方法名（即：selector），如：</li>
<li>[receiver message]，将被转换为：objc_msgSend(receiver, selector)</li>
<li>objc_msgSend方法也能hold住message的参数，如：</li>
<li>objc_msgSend(receiver, selector, arg1, arg2, …);</li>
</ul>
<h3 id="objc_msgSend方法会做按照顺序进行以下操作，以完成动态绑定">objc_msgSend方法会做按照顺序进行以下操作，以完成动态绑定</h3><ol>
<li>查找selector所指代的程序（方法的真正实现）。因为不同类对同一方法有不同的实现，所以对方法的真正实现的查找依赖于receiver的类</li>
<li>调用该实现，并将一系列参数传递过去</li>
<li>将该实现的返回值作为自己的返回值，返回之</li>
</ol>
<h4 id="消息传递的关键是，编译器构建每个类和对象时所采用的数据结构。每个类都包含以下两个必要元素：">消息传递的关键是，编译器构建每个类和对象时所采用的数据结构。每个类都包含以下两个必要元素：</h4><ul>
<li>一个指向父类的指针</li>
<li>一个调度表（dispatch table）。该调度表将类的selector与方法的实际内存地址关联起来</li>
<li>每个对象都有一个指向所属类的指针isa。通过该指针，对象可以找到它所属的类，也就找到了其全部父类，如下图所示：<br><img src="http://dangpu-wordpress.stor.sinaapp.com/uploads/2012/07/iPhone_Message.png" alt="ISA"></li>
</ul>
<p>当向一个对象发送消息时，objc_msgSend方法根据对象的isa指针找到对象的类，然后在类的调度表（dispatch table）中查找selector。如果无法找到selector，objc_msgSend通过指向父类的指针找到父类，并在父类的调度表（dispatch table）中查找selector，以此类推直到NSObject类。一旦查找到selector，objc_msgSend方法根据调度表的内存地址调用该实现。 通过这种方式，message与方法的真正实现在执行阶段才绑定。</p>
<p>为了保证消息发送与执行的效率，系统会将全部selector和使用过的方法的内存地址缓存起来。每个类都有一个独立的缓存，缓存包含有当前类自己的 selector以及继承自父类的selector。查找调度表（dispatch table）前，消息发送系统首先检查receiver对象的缓存。缓存命中的情况下，消息发送（messaging）比直接调用方法（function call）只慢一点点点点。</p>
<h4 id="关于Selector，什么_是Selector，Selector就是一个字符串，用来表示一个方法。">关于Selector，什么 是Selector，Selector就是一个字符串，用来表示一个方法。</h4><p>在Objective-C中，消息是直到运行的时候才和方法实现绑定的。编译器会把一个消息表达式，</p>
<p><code>[receiver message]</code></p>
<p>转换成一个对消息函数objc_msgSend的调用。该函数有两个主要参数：消息接收者和消息对应的方法名字——也就是方法选标：</p>
<p><code>objc_msgSend(receiver, selector)</code></p>
<p>同时接收消息中的任意数目的参数：</p>
<p><code>objc_msgSend(receiver, selector, arg1, arg2, ...)</code><br>该消息函数做了动态绑定所需要的一切：</p>
<p><strong>它首先找到选标所对应的方法实现。因为不同的类对同一方法可能会有不同的实现，所以找到的方法实现依赖于消息接收者的类型。</strong></p>
<p><strong>然后将消息接收者对象（指向消息接收者对象的指针）以及方法中指定的参数传给找到的方法实现。</strong></p>
<p><strong>最后，将方法实现的返回值作为该函数的返回值返回。</strong></p>
<p><strong>注意：编译器将自动插入调用该消息函数的代码。您无须在代码中显示调用该消息函数。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="在Objective-C中，message与方法的真正实现是在执行阶段绑定的，而非编译阶段。">在Objective-C中，message与方法的真正实现是在执行阶段绑定的，而非编译阶段。</h3><ul>
<li>编译器会将消息发送转换成对objc_msgSen]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/15/hello-world/"/>
    <id>http://yoursite.com/2015/08/15/hello-world/</id>
    <published>2015-08-15T03:36:07.000Z</published>
    <updated>2015-08-27T10:04:49.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
